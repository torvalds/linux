.\" $OpenBSD: BIO_new.3,v 1.29 2025/06/08 22:40:29 schwarze Exp $
.\" full merge up to:
.\" OpenSSL man3/BIO_new.pod fb46be03 Feb 26 11:51:31 2016 +0000
.\" OpenSSL man7/bio.pod 631c37be Dec 12 16:56:50 2017 +0100
.\" partial merge up to:
.\" OpenSSL man3/BIO_new.pod e9b77246 Jan 20 19:58:49 2017 +0100
.\"
.\" This file was written by Dr. Stephen Henson <steve@openssl.org>.
.\" Copyright (c) 2000, 2015, 2016 The OpenSSL Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 8 2025 $
.Dt BIO_NEW 3
.Os
.Sh NAME
.Nm BIO_new ,
.Nm BIO_up_ref ,
.Nm BIO_set ,
.Nm BIO_free ,
.Nm BIO_vfree ,
.Nm BIO_free_all
.Nd construct and destruct I/O abstraction objects
.Sh SYNOPSIS
.Lb libcrypto
.In openssl/bio.h
.Ft BIO *
.Fo BIO_new
.Fa "const BIO_METHOD *type"
.Fc
.Ft int
.Fo BIO_up_ref
.Fa "BIO *a"
.Fc
.Ft int
.Fo BIO_set
.Fa "BIO *a"
.Fa "const BIO_METHOD *type"
.Fc
.Ft int
.Fo BIO_free
.Fa "BIO *a"
.Fc
.Ft void
.Fo BIO_vfree
.Fa "BIO *a"
.Fc
.Ft void
.Fo BIO_free_all
.Fa "BIO *a"
.Fc
.Sh DESCRIPTION
A
.Vt BIO
is an I/O abstraction object, hiding many of the underlying I/O
details from an application.
If an application uses BIOs for its I/O, it can transparently handle
SSL connections, unencrypted network connections, and file I/O.
.Pp
The
.Fn BIO_new
function constructs a new
.Vt BIO
using the method
.Fa type
and sets its reference count to 1.
There are two groups of BIO types, source/sink BIOs and filter BIOs.
.Pp
Source/sink BIOs provide input or consume output.
Examples include socket BIOs and file BIOs.
.Pp
Filter BIOs take data from one BIO and pass it through to another,
or to the application, forming a chain of BIOs.
The data may be left unmodified (for example by a message digest BIO)
or translated (for example by an encryption BIO).
The effect of a filter BIO may change according to the I/O operation
it is performing: for example an encryption BIO encrypts data
if it is written to and decrypts data if it is read from.
.Pp
Some BIOs (such as memory BIOs) can be used immediately after calling
.Fn BIO_new .
Others (such as file BIOs) need some additional initialization, and
utility functions exists to construct and initialize such BIOs.
.Pp
Normally the
.Fa type
argument is supplied by a function which returns a pointer to a
.Vt BIO_METHOD .
There is a naming convention for such functions:
the methods for source/sink BIOs are called
.Fn BIO_s_*
and those for filter BIOs
.Fn BIO_f_* .
.Pp
.Fn BIO_up_ref
increments the reference count of
.Fa a
by 1.
.Pp
.Fn BIO_set
is a deprecated function to initialize an unused
.Vt BIO
structure located in static memory or on the stack,
to set its method to
.Fa type ,
and to set its reference count to 1.
It must not be called on
.Vt BIO
objects created with
.Fn BIO_new ,
nor on objects that were already used.
.Pp
.Fn BIO_free
and
.Fn BIO_vfree
decrement the reference count of
.Fa a
by 1, and if the reference count reaches 0, they destruct the single
.Vt BIO
.Fa a ,
which may also have some effect on the
underlying I/O structure, for example it may close the file being
referred to under certain circumstances.
If
.Fa a
is a
.Dv NULL
pointer, no action occurs.
If
.Fn BIO_free
is called on a BIO chain, it destructs at most one BIO,
resulting in a memory leak.
.Pp
.Fn BIO_free_all
calls
.Fn BIO_free
on
.Fa a
and on all following
.Vt BIO
objects in the chain.
As soon as the reference count of a
.Vt BIO
is still non-zero after calling
.Fn BIO_free
on it, the function
.Fn BIO_free_all
returns right away and refrains from freeing the remaining
.Vt BIO
objects in the chain.
It does not halt if an error occurs
destructing an individual BIO in the chain.
If
.Fa a
is a
.Dv NULL
pointer, no action occurs.
Calling
.Fn BIO_free_all
on a single BIO has the same effect as
.Fn BIO_vfree .
.Pp
Common I/O functions are documented in
.Xr BIO_read 3 .
Forming chains is explained in
.Xr BIO_push 3 ;
inspecting them is explained in
.Xr BIO_find_type 3 .
For more details about the different kinds of BIOs, see the individual
.Vt BIO_METHOD
manual pages.
.Sh RETURN VALUES
.Fn BIO_new
returns a newly constructed
.Vt BIO
object or
.Dv NULL
on failure.
.Pp
.Fn BIO_up_ref ,
.Fn BIO_set ,
and
.Fn BIO_free
return 1 for success or 0 for failure.
.Sh EXAMPLES
Create a memory BIO:
.Pp
.Dl BIO *mem = BIO_new(BIO_s_mem());
.Sh SEE ALSO
.Xr BIO_accept 3 ,
.Xr BIO_ctrl 3 ,
.Xr BIO_dump 3 ,
.Xr BIO_dup_chain 3 ,
.Xr BIO_f_base64 3 ,
.Xr BIO_f_buffer 3 ,
.Xr BIO_f_cipher 3 ,
.Xr BIO_f_md 3 ,
.Xr BIO_f_null 3 ,
.Xr BIO_f_ssl 3 ,
.Xr BIO_find_type 3 ,
.Xr BIO_get_ex_new_index 3 ,
.Xr BIO_meth_new 3 ,
.Xr BIO_new_CMS 3 ,
.Xr BIO_printf 3 ,
.Xr BIO_push 3 ,
.Xr BIO_read 3 ,
.Xr BIO_s_accept 3 ,
.Xr BIO_s_bio 3 ,
.Xr BIO_s_connect 3 ,
.Xr BIO_s_datagram 3 ,
.Xr BIO_s_fd 3 ,
.Xr BIO_s_file 3 ,
.Xr BIO_s_mem 3 ,
.Xr BIO_s_null 3 ,
.Xr BIO_s_socket 3 ,
.Xr BIO_set_callback 3 ,
.Xr BIO_set_data 3 ,
.Xr BIO_should_retry 3 ,
.Xr BUF_MEM_new 3 ,
.Xr crypto 3
.Sh HISTORY
.Fn BIO_new ,
.Fn BIO_set ,
and
.Fn BIO_free
first appeared in SSLeay 0.6.0.
.Fn BIO_free_all
first appeared in SSLeay 0.6.6.
All these functions have been available since
.Ox 2.4 .
.Pp
.Fn BIO_vfree
first appeared in OpenSSL 0.9.6 and has been available since
.Ox 2.9 .
.Pp
.Fn BIO_up_ref
first appeared in OpenSSL 1.1.0 and has been available since
.Ox 6.3 .
