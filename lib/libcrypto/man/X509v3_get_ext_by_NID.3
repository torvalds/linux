.\" $OpenBSD: X509v3_get_ext_by_NID.3,v 1.16 2025/06/08 22:40:30 schwarze Exp $
.\" full merge up to: OpenSSL fd38836b Jun 20 15:25:43 2018 +0100
.\"
.\" This file was written by Dr. Stephen Henson <steve@openssl.org>.
.\" Copyright (c) 2015 The OpenSSL Project.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\"
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in
.\"    the documentation and/or other materials provided with the
.\"    distribution.
.\"
.\" 3. All advertising materials mentioning features or use of this
.\"    software must display the following acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
.\"
.\" 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
.\"    endorse or promote products derived from this software without
.\"    prior written permission. For written permission, please contact
.\"    openssl-core@openssl.org.
.\"
.\" 5. Products derived from this software may not be called "OpenSSL"
.\"    nor may "OpenSSL" appear in their names without prior written
.\"    permission of the OpenSSL Project.
.\"
.\" 6. Redistributions of any form whatsoever must retain the following
.\"    acknowledgment:
.\"    "This product includes software developed by the OpenSSL Project
.\"    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
.\" EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
.\" PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
.\" ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
.\" SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
.\" NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
.\" ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
.\" OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 8 2025 $
.Dt X509V3_GET_EXT_BY_NID 3
.Os
.Sh NAME
.Nm X509v3_get_ext_count ,
.Nm X509v3_get_ext ,
.Nm X509v3_get_ext_by_NID ,
.Nm X509v3_get_ext_by_OBJ ,
.Nm X509v3_get_ext_by_critical ,
.Nm X509v3_delete_ext ,
.Nm X509v3_add_ext ,
.Nm X509_get_ext_count ,
.Nm X509_get_ext ,
.Nm X509_get_ext_by_NID ,
.Nm X509_get_ext_by_OBJ ,
.Nm X509_get_ext_by_critical ,
.Nm X509_delete_ext ,
.Nm X509_add_ext ,
.Nm X509_CRL_get_ext_count ,
.Nm X509_CRL_get_ext ,
.Nm X509_CRL_get_ext_by_NID ,
.Nm X509_CRL_get_ext_by_OBJ ,
.Nm X509_CRL_get_ext_by_critical ,
.Nm X509_CRL_delete_ext ,
.Nm X509_CRL_add_ext ,
.Nm X509_REVOKED_get_ext_count ,
.Nm X509_REVOKED_get_ext ,
.Nm X509_REVOKED_get_ext_by_NID ,
.Nm X509_REVOKED_get_ext_by_OBJ ,
.Nm X509_REVOKED_get_ext_by_critical ,
.Nm X509_REVOKED_delete_ext ,
.Nm X509_REVOKED_add_ext
.Nd extension stack utility functions
.Sh SYNOPSIS
.Lb libcrypto
.In openssl/x509.h
.Ft int
.Fo X509v3_get_ext_count
.Fa "const STACK_OF(X509_EXTENSION) *x"
.Fc
.Ft X509_EXTENSION *
.Fo X509v3_get_ext
.Fa "const STACK_OF(X509_EXTENSION) *x"
.Fa "int loc"
.Fc
.Ft int
.Fo X509v3_get_ext_by_NID
.Fa "const STACK_OF(X509_EXTENSION) *x"
.Fa "int nid"
.Fa "int lastpos"
.Fc
.Ft int
.Fo X509v3_get_ext_by_OBJ
.Fa "const STACK_OF(X509_EXTENSION) *x"
.Fa "const ASN1_OBJECT *obj"
.Fa "int lastpos"
.Fc
.Ft int
.Fo X509v3_get_ext_by_critical
.Fa "const STACK_OF(X509_EXTENSION) *x"
.Fa "int crit"
.Fa "int lastpos"
.Fc
.Ft X509_EXTENSION *
.Fo X509v3_delete_ext
.Fa "STACK_OF(X509_EXTENSION) *x"
.Fa "int loc"
.Fc
.Ft STACK_OF(X509_EXTENSION) *
.Fo X509v3_add_ext
.Fa "STACK_OF(X509_EXTENSION) **x"
.Fa "X509_EXTENSION *ex"
.Fa "int loc"
.Fc
.Ft int
.Fo X509_get_ext_count
.Fa "const X509 *x"
.Fc
.Ft X509_EXTENSION *
.Fo X509_get_ext
.Fa "const X509 *x"
.Fa "int loc"
.Fc
.Ft int
.Fo X509_get_ext_by_NID
.Fa "const X509 *x"
.Fa "int nid"
.Fa "int lastpos"
.Fc
.Ft int
.Fo X509_get_ext_by_OBJ
.Fa "const X509 *x"
.Fa "const ASN1_OBJECT *obj"
.Fa "int lastpos"
.Fc
.Ft int
.Fo X509_get_ext_by_critical
.Fa "const X509 *x"
.Fa "int crit"
.Fa "int lastpos"
.Fc
.Ft X509_EXTENSION *
.Fo X509_delete_ext
.Fa "X509 *x"
.Fa "int loc"
.Fc
.Ft int
.Fo X509_add_ext
.Fa "X509 *x"
.Fa "X509_EXTENSION *ex"
.Fa "int loc"
.Fc
.Ft int
.Fo X509_CRL_get_ext_count
.Fa "const X509_CRL *x"
.Fc
.Ft X509_EXTENSION *
.Fo X509_CRL_get_ext
.Fa "const X509_CRL *x"
.Fa "int loc"
.Fc
.Ft int
.Fo X509_CRL_get_ext_by_NID
.Fa "const X509_CRL *x"
.Fa "int nid"
.Fa "int lastpos"
.Fc
.Ft int
.Fo X509_CRL_get_ext_by_OBJ
.Fa "const X509_CRL *x"
.Fa "const ASN1_OBJECT *obj"
.Fa "int lastpos"
.Fc
.Ft int
.Fo X509_CRL_get_ext_by_critical
.Fa "const X509_CRL *x"
.Fa "int crit"
.Fa "int lastpos"
.Fc
.Ft X509_EXTENSION *
.Fo X509_CRL_delete_ext
.Fa "X509_CRL *x"
.Fa "int loc"
.Fc
.Ft int
.Fo X509_CRL_add_ext
.Fa "X509_CRL *x"
.Fa "X509_EXTENSION *ex"
.Fa "int loc"
.Fc
.Ft int
.Fo X509_REVOKED_get_ext_count
.Fa "const X509_REVOKED *x"
.Fc
.Ft X509_EXTENSION *
.Fo X509_REVOKED_get_ext
.Fa "const X509_REVOKED *x"
.Fa "int loc"
.Fc
.Ft int
.Fo X509_REVOKED_get_ext_by_NID
.Fa "const X509_REVOKED *x"
.Fa "int nid"
.Fa "int lastpos"
.Fc
.Ft int
.Fo X509_REVOKED_get_ext_by_OBJ
.Fa "const X509_REVOKED *x"
.Fa "const ASN1_OBJECT *obj"
.Fa "int lastpos"
.Fc
.Ft int
.Fo X509_REVOKED_get_ext_by_critical
.Fa "const X509_REVOKED *x"
.Fa "int crit"
.Fa "int lastpos"
.Fc
.Ft X509_EXTENSION *
.Fo X509_REVOKED_delete_ext
.Fa "X509_REVOKED *x"
.Fa "int loc"
.Fc
.Ft int
.Fo X509_REVOKED_add_ext
.Fa "X509_REVOKED *x"
.Fa "X509_EXTENSION *ex"
.Fa "int loc"
.Fc
.Sh DESCRIPTION
.Fn X509v3_get_ext_count
retrieves the number of extensions in
.Fa x .
.Pp
.Fn X509v3_get_ext
retrieves extension
.Fa loc
from
.Fa x .
The index
.Fa loc
can take any value from 0 to
.Fn X509_get_ext_count x No \- 1 .
The returned extension is an internal pointer which must not be
freed up by the application.
.Pp
.Fn X509v3_get_ext_by_NID
and
.Fn X509v3_get_ext_by_OBJ
look for an extension with
.Fa nid
or
.Fa obj
from extension stack
.Fa x .
The search starts from the extension after
.Fa lastpos
or from the beginning if
.Fa lastpos
is \-1.
If the extension is found, its index is returned; otherwise, a negative
value is returned.
.Pp
.Fn X509v3_get_ext_by_critical
is similar to
.Fn X509v3_get_ext_by_NID
except that it looks for an extension of criticality
.Fa crit .
A zero value for
.Fa crit
looks for a non-critical extension; a non-zero value looks for a
critical extension.
.Pp
.Fn X509v3_delete_ext
deletes the extension with index
.Fa loc
from
.Fa x .
The deleted extension is returned and must be freed by the caller.
If
.Fa loc
is an invalid index value,
.Dv NULL
is returned.
.Pp
.Fn X509v3_add_ext
adds the extension
.Fa ex
to the stack
.Pf * Fa x
at position
.Fa loc .
If
.Fa loc
is \-1, the new extension is added to the end.
If
.Pf * Fa x
is
.Dv NULL ,
a new stack will be allocated.
The passed extension
.Fa ex
is duplicated internally so it must be freed after use.
.Pp
.Fn X509_get_ext_count ,
.Fn X509_get_ext ,
.Fn X509_get_ext_by_NID ,
.Fn X509_get_ext_by_OBJ ,
.Fn X509_get_ext_by_critical ,
.Fn X509_delete_ext ,
and
.Fn X509_add_ext
operate on the extensions of certificate
.Fa x .
They are otherwise identical to the X509v3 functions.
.Pp
.Fn X509_CRL_get_ext_count ,
.Fn X509_CRL_get_ext ,
.Fn X509_CRL_get_ext_by_NID ,
.Fn X509_CRL_get_ext_by_OBJ ,
.Fn X509_CRL_get_ext_by_critical ,
.Fn X509_CRL_delete_ext ,
and
.Fn X509_CRL_add_ext
operate on the extensions of the CRL
.Fa x .
They are otherwise identical to the X509v3 functions.
.Pp
.Fn X509_REVOKED_get_ext_count ,
.Fn X509_REVOKED_get_ext ,
.Fn X509_REVOKED_get_ext_by_NID ,
.Fn X509_REVOKED_get_ext_by_OBJ ,
.Fn X509_REVOKED_get_ext_by_critical ,
.Fn X509_REVOKED_delete_ext ,
and
.Fn X509_REVOKED_add_ext
operate on the extensions of the CRL entry
.Fa x .
They are otherwise identical to the X509v3 functions.
.Pp
These functions are used to examine stacks of extensions directly.
Many applications will want to parse or encode and add an extension:
they should use the extension encode and decode functions instead
such as
.Xr X509_get_ext_d2i 3 .
.Pp
Extension indices start from zero, so a zero index return value is
not an error.
These search functions start from the extension
.Em after
the
.Fa lastpos
parameter, so it should initially be set to \-1.
If it is set to 0, the initial extension will not be checked.
.Sh RETURN VALUES
.Fn X509v3_get_ext_count
returns the extension count.
.Pp
.Fn X509v3_get_ext ,
.Fn X509v3_delete_ext ,
and
.Fn X509_delete_ext
return an
.Vt X509_EXTENSION
pointer or
.Dv NULL
if an error occurs.
.Pp
.Fn X509v3_get_ext_by_NID ,
.Fn X509v3_get_ext_by_OBJ ,
and
.Fn X509v3_get_ext_by_critical
return the extension index or \-1 if an error occurs.
In addition,
.Fn X509v3_get_ext_by_NID
returns \-2 if
.Xr OBJ_nid2obj 3
fails on the requested
.Fa nid .
.Pp
.Fn X509v3_add_ext
returns a stack of extensions or
.Dv NULL
on error.
.Pp
.Fn X509_add_ext
returns 1 on success or 0 on error.
.Sh SEE ALSO
.Xr OBJ_nid2obj 3 ,
.Xr X509_CRL_new 3 ,
.Xr X509_EXTENSION_new 3 ,
.Xr X509_new 3 ,
.Xr X509_REVOKED_new 3 ,
.Xr X509V3_EXT_print 3 ,
.Xr X509V3_extensions_print 3 ,
.Xr X509V3_get_d2i 3
.Sh HISTORY
These functions first appeared in SSLeay 0.8.0
and have been available since
.Ox 2.4 .
