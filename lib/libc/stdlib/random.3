.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	$OpenBSD: random.3,v 1.29 2021/02/12 17:03:51 deraadt Exp $
.\"
.Dd $Mdocdate: February 12 2021 $
.Dt RANDOM 3
.Os
.Sh NAME
.Nm random ,
.Nm srandom ,
.Nm srandom_deterministic ,
.Nm srandomdev ,
.Nm initstate ,
.Nm setstate
.Nd pseudo-random number generator; routines for changing generators
.Sh SYNOPSIS
.In stdlib.h
.Ft long
.Fn random void
.Ft void
.Fn srandom "unsigned int seed"
.Ft void
.Fn srandom_deterministic "unsigned int seed"
.Ft void
.Fn srandomdev void
.Ft char *
.Fn initstate "unsigned int seed" "char *state" "size_t n"
.Ft char *
.Fn setstate "char *state"
.Sh DESCRIPTION
.Bf -symbolic
Standards insist that this interface return deterministic results.
Unsafe usage is very common, so
.Ox
changed the subsystem to return non-deterministic results by default.
.Ef
.Pp
To satisfy portable code,
.Fn srandom
or
.Fn srandomdev
may be called to initialize the subsystem.
In
.Ox
the
.Ar seed
variable is ignored, and strong random number results will be provided from
.Xr arc4random 3 .
In other systems, the
.Ar seed
variable primes a simplistic deterministic algorithm.
.Pp
If the standardized behavior is required
.Fn srandom_deterministic
can be substituted for
.Fn srandom ,
then subsequent
.Fn random
calls will return results using the deterministic algorithm.
.Pp
In non-deterministic (default) mode, the
.Fn random
function returns results from
.Xr arc4random 3
in the range from 0 to (2**31)\-1.
.Pp
In deterministic mode, the
.Fn random
function uses a non-linear additive feedback random number generator employing
a default table of size 31 long integers to return successive pseudo-random
numbers in the range from 0 to (2**31)\-1.
The period of this random number generator is very large, approximately
16*((2**31)\-1), but the results are a deterministic sequence from the seed.
The deterministic sequence algorithm changed a number of times since
original development, is underspecified, and should not be relied upon to
remain consistent between platforms and over time.
.Pp
The
.Fn initstate
routine allows a state array, passed in as an argument, to be initialized
for future use.
The size of the state array (in bytes) is used by
.Fn initstate
to decide how sophisticated a random number generator it should use \(em the
more state, the better the random numbers will be.
(Current "optimal" values for the amount of state information are
8, 32, 64, 128, and 256 bytes; other amounts will be rounded down to
the nearest known amount.
Using less than 8 bytes will cause an error.)
The seed for the initialization (which specifies a starting point for
the random number sequence, and provides for restarting at the same
point) is also an argument.
The
.Fn initstate
function returns a pointer to the previous state information array.
.Pp
Once a state has been initialized, the
.Fn setstate
routine provides for rapid switching between states.
The
.Fn setstate
function returns a pointer to the previous state array; its
argument state array is used for further random number generation
until the next call to
.Fn initstate
or
.Fn setstate .
.Pp
Once a state array has been initialized, it may be restarted at a
different point either by calling
.Fn initstate
(with the desired seed, the state array, and its size) or by calling
both
.Fn setstate
(with the state array) and
.Fn srandom
(with the desired seed).
The advantage of calling both
.Fn setstate
and
.Fn srandom
is that the size of the state array does not have to be remembered after
it is initialized.
.Pp
Use of
.Fn srandom_deterministic ,
.Fn initstate ,
or
.Fn setstate
forces the subsystem into deterministic mode.
.Sh DIAGNOSTICS
If
.Fn initstate
is called with less than 8 bytes of state information, or if
.Fn setstate
detects that the state information has been garbled, error
messages are printed on the standard error output.
.Sh SEE ALSO
.Xr arc4random 3 ,
.Xr drand48 3 ,
.Xr rand 3 ,
.Xr random 4
.Sh STANDARDS
The
.Fn random ,
.Fn initstate ,
and
.Fn setstate
functions conform to
.St -xpg4.2 .
.Pp
The
.Fn srandom
function does not conform to
.St -xpg4.2 ,
intentionally.
.Pp
The
.Fn srandomdev
function is an extension.
.Pp
The
.Fn srandom_deterministic
function is an
.Ox
extension.
.Sh HISTORY
These
functions appeared in
.Bx 4.2 .
.Sh AUTHORS
.An Earl T. Cohen
