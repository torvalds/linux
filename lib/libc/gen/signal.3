.\"	$OpenBSD: signal.3,v 1.59 2024/07/14 03:47:44 jsg Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: July 14 2024 $
.Dt SIGNAL 3
.Os
.Sh NAME
.Nm signal ,
.Nm bsd_signal
.Nd simplified software signal facilities
.Sh SYNOPSIS
.In signal.h
.Ft void
.Fo "(*signal(int sigcatch, void (*func)(int sigraised)))"
.Fa int
.Fc
.Ft void
.Fo "(*bsd_signal(int sigcatch, void (*func)(int sigraised)))"
.Fa int
.Fc
.Sh DESCRIPTION
The
.Fn signal
and
.Fn bsd_signal
facilities are simplified interfaces to the more general
.Xr sigaction 2
facility.
The
.Fn bsd_signal
interface is provided for source compatibility only.
It is mainly used on systems where the standard
.Fn signal
does not have
.Bx
semantics.
On
.Ox
the two interfaces are identical.
.Pp
Signals allow the manipulation of a process from outside its
domain as well as allowing the process to manipulate itself or
copies of itself (children).
There are two general types of signals:
those that cause termination of a process and those that do not.
Signals which cause termination of a program might result from
an irrecoverable error or might be the result of a user at a terminal
typing the
.Dq interrupt
character.
.Pp
Signals are used when a process is stopped because it wishes to access
its controlling terminal while in the background (see
.Xr tty 4 ) .
Signals are optionally generated
when a process resumes after being stopped,
when the status of child processes changes,
or when input is ready at the controlling terminal.
Most signals result in the termination of the process receiving them
if no action
is taken; some signals instead cause the process receiving them
to be stopped, or are simply discarded if the process has not
requested otherwise.
.Pp
Except for the
.Dv SIGKILL
and
.Dv SIGSTOP
signals, the
.Fn signal
function allows for any signal to be caught, to be ignored, or to generate
an interrupt.
These signals are defined in the file
.In signal.h :
.Bl -column "SIGVTALRM" "create core image" "terminal line hangup"
.It Sy "Name" Ta Sy "Default Action" Ta Sy "Description"
.It Dv SIGHUP Ta "terminate process" Ta "terminal line hangup"
.It Dv SIGINT Ta "terminate process" Ta "interrupt program"
.It Dv SIGQUIT Ta "create core image" Ta "quit program"
.It Dv SIGILL Ta "create core image" Ta "illegal instruction"
.It Dv SIGTRAP Ta "create core image" Ta "trace trap"
.It Dv SIGABRT Ta "create core image" Ta "abort(3) call (formerly SIGIOT)"
.It Dv SIGEMT Ta "create core image" Ta "emulate instruction executed"
.It Dv SIGFPE Ta "create core image" Ta "floating-point exception"
.It Dv SIGKILL Ta "terminate process" Ta "kill program (cannot be caught or ignored)"
.It Dv SIGBUS Ta "create core image" Ta "bus error"
.It Dv SIGSEGV Ta "create core image" Ta "segmentation violation"
.It Dv SIGSYS Ta "create core image" Ta "system call given invalid argument"
.It Dv SIGPIPE Ta "terminate process" Ta "write on a pipe with no reader"
.It Dv SIGALRM Ta "terminate process" Ta "real-time timer expired"
.It Dv SIGTERM Ta "terminate process" Ta "software termination signal"
.It Dv SIGURG Ta "discard signal" Ta "urgent condition present on socket"
.It Dv SIGSTOP Ta "stop process" Ta "stop (cannot be caught or ignored)"
.It Dv SIGTSTP Ta "stop process" Ta "stop signal generated from keyboard"
.It Dv SIGCONT Ta "discard signal" Ta "continue after stop"
.It Dv SIGCHLD Ta "discard signal" Ta "child status has changed"
.It Dv SIGTTIN Ta "stop process" Ta "background read attempted from controlling terminal"
.It Dv SIGTTOU Ta "stop process" Ta "background write attempted to controlling terminal"
.It Dv SIGIO Ta "discard signal" Ta "I/O is possible on a descriptor (see"
.Xr fcntl 2 )
.It Dv SIGXCPU Ta "terminate process" Ta "CPU time limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGXFSZ Ta "terminate process" Ta "file size limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGVTALRM Ta "terminate process" Ta "virtual time alarm (see"
.Xr setitimer 2 )
.It Dv SIGPROF Ta "terminate process" Ta "profiling timer alarm (see"
.Xr setitimer 2 )
.It Dv SIGWINCH Ta "discard signal" Ta "window size change"
.It Dv SIGINFO Ta "discard signal" Ta "status request from keyboard"
.It Dv SIGUSR1 Ta "terminate process" Ta "user-defined signal 1"
.It Dv SIGUSR2 Ta "terminate process" Ta "user-defined signal 2"
.It Dv SIGTHR Ta "discard signal" Ta "thread AST"
.El
.Pp
The
.Fa func
argument is a function to be called as the action upon receipt of the signal
.Fa sigcatch .
The function will be called with one argument,
.Fa sigraised ,
which is the signal raised (thus the same function,
.Fa func ,
can be used by more than one signal).
To set the default action of the signal to occur as listed above,
.Fa func
should be
.Dv SIG_DFL .
A
.Dv SIG_DFL
resets the default action.
To ignore the signal,
.Fa func
should be
.Dv SIG_IGN .
This will cause subsequent instances of the signal to be ignored
and pending instances to be discarded.
If
.Dv SIG_IGN
is not used,
further occurrences of the signal are
automatically blocked and
.Fa func
is called.
.Pp
If the
.Fa func
is set to
.Dv SIG_IGN
for the
.Dv SIGCHLD
signal, the system will not create zombie processes when children of
the calling process exit.
If the calling process subsequently issues a
.Xr wait 2
(or equivalent), it blocks until all of the calling process's child
processes terminate, and then returns a value of \-1 with
.Va errno
set to
.Dv ECHILD .
.Bf -symbolic
This differs from historical
.Bx
behavior but is consistent with
.At V
as well as the
.St -xpg4.2 .
.Ef
.Pp
The handled signal is unblocked when
.Fa func
returns and
the process continues from where it left off when the signal occurred.
.Bf -symbolic
Unlike previous signal facilities, the handler
func() remains installed after a signal has been delivered.
.Ef
.Pp
For some system calls, if a signal is caught while the call is
executing and the call is prematurely terminated,
the call is automatically restarted.
(The handler is installed using the
.Dv SA_RESTART
flag with
.Xr sigaction 2 . )
The affected system calls include
.Xr read 2 ,
.Xr write 2 ,
.Xr sendto 2 ,
.Xr recvfrom 2 ,
.Xr sendmsg 2 ,
and
.Xr recvmsg 2
on a communications channel or a low-speed device
and during a
.Xr ioctl 2
or
.Xr wait 2 .
However, calls that have already committed are not restarted,
but instead return a partial success (for example, a short read count).
The
.Xr siginterrupt 3
function can be used to change the system call restart behavior for
a specific signal.
.Pp
When a process which has installed signal handlers forks,
the child process inherits the signals.
All caught signals, as well as
.Dv SIGCHLD ,
are reset to their default action by a call
to the
.Xr execve 2
function;
other
ignored signals remain ignored.
.Pp
Signal handlers should be as minimal as possible, and use only signal-safe
operations.
The safest handlers only change a single variable of type
.Va volatile sig_atomic_t ,
which is inspected by an event loop.
Other variables accessed inside the handler must be either const, or
local to the handler.
More complicated global variables (such as strings, structs, or lists)
will require external methods to guarantee consistency, such as
signal-blocking with
.Xr sigprocmask 2 .
.Pp
More complicated handlers must restrict themselves to calling only the following
list of signal-safe functions directly.
Avoid abstracting the work to helper functions which are also called from
other contexts because future coders will forget the signal-safe requirement.
.Pp
Standard Interfaces:
.Pp
.Fn _exit ,
.Fn _Exit ,
.Fn abort ,
.Fn accept ,
.Fn access ,
.Fn alarm ,
.Fn bind ,
.Fn cfgetispeed ,
.Fn cfgetospeed ,
.Fn cfsetispeed ,
.Fn cfsetospeed ,
.Fn chdir ,
.Fn chmod ,
.Fn chown ,
.Fn clock_gettime ,
.Fn close ,
.Fn connect ,
.Fn creat ,
.Fn dup ,
.Fn dup2 ,
.Fn execl ,
.Fn execle ,
.Fn execv ,
.Fn execve ,
.Fn faccessat ,
.Fn fchdir ,
.Fn fchmod ,
.Fn fchmodat ,
.Fn fchown ,
.Fn fchownat ,
.Fn fcntl ,
.Fn fdatasync ,
.Fn fork ,
.Fn fpathconf ,
.Fn fstat ,
.Fn fstatat ,
.Fn fsync ,
.Fn ftruncate ,
.Fn futimens ,
.Fn futimes ,
.Fn getegid ,
.Fn geteuid ,
.Fn getgid ,
.Fn getgroups ,
.Fn getpeername ,
.Fn getpgrp ,
.Fn getpid ,
.Fn getppid ,
.Fn getsockname ,
.Fn getsockopt ,
.Fn getuid ,
.Fn kill ,
.Fn link ,
.Fn linkat ,
.Fn listen ,
.Fn lseek ,
.Fn lstat ,
.Fn mkdir ,
.Fn mkdirat ,
.Fn mkfifo ,
.Fn mkfifoat ,
.Fn mknod ,
.Fn mknodat ,
.Fn open ,
.Fn openat ,
.Fn pathconf ,
.Fn pause ,
.Fn pipe ,
.Fn poll ,
.Fn pselect ,
.Fn pthread_sigmask ,
.Fn raise ,
.Fn read ,
.Fn readlink ,
.Fn readlinkat ,
.Fn recv ,
.Fn recvfrom ,
.Fn recvmsg ,
.Fn rename ,
.Fn renameat ,
.Fn rmdir ,
.Fn select ,
.Fn send ,
.Fn sendmsg ,
.Fn sendto ,
.Fn setgid ,
.Fn setpgid ,
.Fn setsid ,
.Fn setsockopt ,
.Fn setuid ,
.Fn shutdown ,
.Fn sigaction ,
.Fn sigaddset ,
.Fn sigdelset ,
.Fn sigemptyset ,
.Fn sigfillset  ,
.Fn sigismember ,
.Fn signal ,
.Fn sigpause ,
.Fn sigpending ,
.Fn sigprocmask ,
.Fn sigsuspend ,
.Fn sleep ,
.Fn sockatmark ,
.Fn socket ,
.Fn socketpair ,
.Fn stat ,
.Fn strcat ,
.Fn strcpy ,
.Fn strncat ,
.Fn strncpy ,
.Fn symlink ,
.Fn symlinkat ,
.Fn sysconf ,
.Fn tcdrain ,
.Fn tcflow ,
.Fn tcflush ,
.Fn tcgetattr ,
.Fn tcgetpgrp ,
.Fn tcsendbreak ,
.Fn tcsetattr ,
.Fn tcsetpgrp ,
.Fn time ,
.Fn times ,
.Fn umask ,
.Fn uname ,
.Fn unlink ,
.Fn unlinkat ,
.Fn utime ,
.Fn utimensat ,
.Fn utimes ,
.Fn wait ,
.Fn waitpid ,
.Fn write ,
and perhaps some others.
.\" unimplemented functions that should be async-sig-safe, if we had them
.\" POSIX Issue 7 additions
.\" .Pp
.\" .Fn fexecve .
.\"
.\" Realtime Interfaces:
.\" .Pp
.\" .Fn aio_error ,
.\" .Fn aio_return ,
.\" .Fn aio_suspend ,
.\" .Fn sem_post ,
.\" .Fn sigqueue ,
.\" .Fn timer_getoverrun ,
.\" .Fn timer_gettime ,
.\" .Fn timer_settime .
.Pp
Extension Interfaces:
.Pp
.Fn accept4 ,
.Fn chflags ,
.Fn chflagsat ,
.Fn dup3 ,
.Fn fchflags ,
.Fn getentropy ,
.Fn getresgid ,
.Fn getresuid ,
.Fn pipe2 ,
.Fn ppoll ,
.Fn sendsyslog ,
.Fn setresgid ,
.Fn setresuid ,
.Fn strlcat ,
.Fn strlcpy ,
.Fn wait3 ,
.Fn wait4 .
.Pp
Since signal-safe functions can encounter system call errors,
.Va errno
should be protected inside the handler with the following pattern:
.Bd -literal -offset indent
void
handler(int sig)
{
	int save_errno = errno;

	...
	errno = save_errno;
}
.Ed
.Pp
On
.Ox ,
a few more functions are signal-safe (except when the format string contains
floating-point arguments).
These functions are expected to be unsafe on other systems, so be very cautious of
the portability trap!
.Pp
.Bl -tag -offset indent -compact -width foofoofoofoo
.It Fn dprintf
Safe.
.It Fn vdprintf
Safe.
.It Fn snprintf
Safe.
.It Fn vsnprintf
Safe.
.It Fn syslog_r
Safe if the
.Va syslog_data
struct is initialized as a local variable.
.El
.Sh RETURN VALUES
The previous action is returned on a successful call.
Otherwise,
.Dv SIG_ERR
is returned and the global variable
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn signal
will fail and no action will take place if one of the
following occurs:
.Bl -tag -width Er
.It Bq Er EINVAL
A specified signal
is not a valid signal number.
.It Bq Er EINVAL
An attempt is made to ignore or supply a handler for
.Dv SIGKILL
or
.Dv SIGSTOP .
.El
.Sh SEE ALSO
.Xr kill 1 ,
.Xr kill 2 ,
.Xr ptrace 2 ,
.Xr sigaction 2 ,
.Xr sigaltstack 2 ,
.Xr sigprocmask 2 ,
.Xr sigsuspend 2 ,
.Xr setjmp 3 ,
.Xr siginterrupt 3 ,
.Xr tty 4
.Sh HISTORY
A
.Fn signal
system call first appeared in
.At v4 .
In
.Bx 4.2 ,
it was reimplemented as a wrapper around the former
.Fn sigvec
system call, and for
.Bx 4.3 Reno ,
it was rewritten to use
.Xr sigaction 2
instead.
