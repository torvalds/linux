.\"	$OpenBSD: getservent.3,v 1.21 2013/06/05 03:39:23 tedu Exp $
.\"
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: June 5 2013 $
.Dt GETSERVENT 3
.Os
.Sh NAME
.Nm getservent ,
.Nm getservent_r ,
.Nm getservbyport ,
.Nm getservbyport_r ,
.Nm getservbyname ,
.Nm getservbyname_r ,
.Nm setservent ,
.Nm setservent_r ,
.Nm endservent ,
.Nm endservent_r
.Nd get service entry
.Sh SYNOPSIS
.In netdb.h
.Ft struct servent *
.Fn getservent "void"
.Ft int
.Fn getservent_r "struct servent *servent" "struct servent_data *servent_data"
.Ft struct servent *
.Fn getservbyname "const char *name" "const char *proto"
.Ft int
.Fn getservbyname_r "const char *name" "const char *proto" "struct servent *servent" "struct servent_data *servent_data"
.Ft struct servent *
.Fn getservbyport "int port" "const char *proto"
.Ft int
.Fn getservbyport_r "int port" "const char *proto" "struct servent *servent" "struct servent_data *servent_data"
.Ft void
.Fn setservent "int stayopen"
.Ft void
.Fn setservent_r "int stayopen" "struct servent_data *servent_data"
.Ft void
.Fn endservent "void"
.Ft void
.Fn endservent_r "struct servent_data *servent_data"
.Sh DESCRIPTION
The
.Fn getservent ,
.Fn getservbyname ,
and
.Fn getservbyport
functions each return a pointer to an object with the following structure
containing the broken-out fields of a line in the network services database,
.Pa /etc/services .
.Bd -literal -offset indent
struct	servent {
	char	*s_name;	/* official name of service */
	char	**s_aliases;	/* alias list */
	int	s_port;		/* port service resides at */
	char	*s_proto;	/* protocol to use */
};
.Ed
.Pp
The members of this structure are:
.Bl -tag -width s_aliases
.It Fa s_name
The official name of the service.
.It Fa s_aliases
A null-terminated list of alternate names for the service.
.It Fa s_port
The port number at which the service resides.
Port numbers are returned in network byte order.
.It Fa s_proto
The name of the protocol to use when contacting the service.
.El
.Pp
The
.Fn getservent
function reads the next line of the file, opening the file if necessary.
.Pp
The
.Fn setservent
function opens and rewinds the file.
If the
.Fa stayopen
flag is non-zero,
the services database will not be closed after each call to
.Fn getservbyname
or
.Fn getservbyport .
.Pp
The
.Fn endservent
function closes the file.
.Pp
The
.Fn getservbyname
and
.Fn getservbyport
functions sequentially search from the beginning of the file until a
matching protocol name or port number (specified in network byte order)
is found, or until
.Dv EOF
is encountered.
If a protocol name is also supplied (non-null),
searches must also match the protocol.
.Pp
The
.Fn getservent_r ,
.Fn getservbyport_r ,
.Fn getservbyname_r ,
.Fn setservent_r ,
and
.Fn endservent_r
functions are reentrant versions of the above functions that take a
pointer to a
.Fa servent_data
structure which is used to store state information.
The structure must be zero-filled before it is used
and should be considered opaque for the sake of portability.
.Pp
The
.Fn getservent_r ,
.Fn getservbyport_r ,
and
.Fn getservbyname_r
functions
also take a pointer to a
.Fa servent
structure which is used to store the results of the database lookup.
.Sh RETURN VALUES
The
.Fn getservent ,
.Fn getservbyport ,
and
.Fn getservbyname
functions return a pointer to a
.Fa servent
structure on success or a null pointer if end-of-file
is reached or an error occurs.
.Pp
The
.Fn getservent_r ,
.Fn getservbyport_r ,
and
.Fn getservbyname_r
functions return 0 on success or \-1 if end-of-file
is reached or an error occurs.
.Sh FILES
.Bl -tag -width /etc/services -compact
.It Pa /etc/services
.El
.Sh SEE ALSO
.Xr getprotoent 3 ,
.Xr services 5
.Sh STANDARDS
The
.Fn getservent ,
.Fn getservbynumber ,
.Fn getservbyname ,
.Fn setservent ,
and
.Fn endservent
functions conform to
.St -p1003.1-2004 .
.Pp
The
.Fn getservent_r ,
.Fn getservbyport_r ,
.Fn getservbyname_r ,
.Fn setservent_r ,
and
.Fn endservent_r
functions are not currently standardized.
This implementation follows the API used by HP, IBM, and Digital.
.Sh HISTORY
The
.Fn getservent ,
.Fn getservbyport ,
.Fn getservbyname ,
.Fn setservent ,
and
.Fn endservent
functions appeared in
.Bx 4.2 .
.Pp
The
.Fn getservent_r ,
.Fn getservbyport_r ,
.Fn getservbyname_r ,
.Fn setservent_r ,
and
.Fn endservent_r
functions appeared in
.Ox 3.7 .
.Sh BUGS
The non-reentrant functions use static data storage; if the data is needed
for future use, it should be copied before any subsequent calls overwrite it.
Expecting port numbers to fit in a 32-bit quantity is probably naive.
