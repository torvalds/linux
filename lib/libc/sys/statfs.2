.\"	$OpenBSD: statfs.2,v 1.29 2022/07/30 07:19:30 jsg Exp $
.\"	$NetBSD: statfs.2,v 1.10 1995/06/29 11:40:48 cgd Exp $
.\"
.\" Copyright (c) 1989, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)statfs.2	8.3 (Berkeley) 2/11/94
.\"
.Dd $Mdocdate: July 30 2022 $
.Dt STATFS 2
.Os
.Sh NAME
.Nm statfs ,
.Nm fstatfs
.Nd get file system statistics
.Sh SYNOPSIS
.In sys/types.h
.In sys/mount.h
.Ft int
.Fn statfs "const char *path" "struct statfs *buf"
.Ft int
.Fn fstatfs "int fd" "struct statfs *buf"
.Sh DESCRIPTION
.Fn statfs
returns information about a mounted file system.
.Fa path
is the pathname of any file within the mounted file system.
.Fa buf
is a pointer to a
.Nm statfs
structure defined as follows:
.Bd -literal
typedef struct { int32_t val[2]; } fsid_t;

#define MFSNAMELEN   16 /* length of fs type name, including nul */
#define MNAMELEN     90	/* length of buffer for returned name */

struct statfs {
    u_int32_t	f_flags;	/* copy of mount flags */
    u_int32_t	f_bsize;	/* file system block size */
    u_int32_t	f_iosize;	/* optimal transfer block size */

				/* unit is f_bsize */
    u_int64_t	f_blocks;	/* total data blocks in file system */
    u_int64_t	f_bfree;	/* free blocks in fs */
    int64_t	f_bavail;	/* free blocks avail to non-superuser */

    u_int64_t	f_files;	/* total file nodes in file system */
    u_int64_t	f_ffree;	/* free file nodes in fs */
    int64_t	f_favail;	/* free file nodes avail to non-root */

    u_int64_t	f_syncwrites;	/* count of sync writes since mount */
    u_int64_t	f_syncreads;	/* count of sync reads since mount */
    u_int64_t	f_asyncwrites;	/* count of async writes since mount */
    u_int64_t	f_asyncreads;	/* count of async reads since mount */

    fsid_t	f_fsid;		/* file system id */
    u_int32_t	f_namemax;	/* maximum filename length */
    uid_t	f_owner;	/* user that mounted the file system */
    u_int64_t	f_ctime;	/* last mount [-u] time */

    char f_fstypename[MFSNAMELEN]; /* fs type name */
    char f_mntonname[MNAMELEN];    /* directory on which mounted */
    char f_mntfromname[MNAMELEN];  /* mounted file system */
    char f_mntfromspec[MNAMELEN];  /* special for mount request */
    union mount_info mount_info;   /* per-filesystem mount options */
};
.Ed
.Pp
.Fn fstatfs
returns the same information about an open file referenced by descriptor
.Fa fd .
.Pp
Note that
.Fa f_fsid
will be empty unless the user is the superuser.
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
.Fn statfs
fails if one or more of the following are true:
.Bl -tag -width Er
.It Bq Er ENOTDIR
A component of the path prefix of
.Fa path
is not a directory.
.It Bq Er ENAMETOOLONG
A component of a pathname exceeded
.Dv NAME_MAX
characters, or an entire pathname (including the terminating NUL)
exceeded
.Dv PATH_MAX
bytes.
.It Bq Er ENOENT
The file referred to by
.Fa path
does not exist.
.It Bq Er EACCES
Search permission is denied for a component of the path prefix of
.Fa path .
.It Bq Er ELOOP
Too many symbolic links were encountered in translating
.Fa path .
.It Bq Er EFAULT
.Fa buf
or
.Fa path
points to an invalid address.
.It Bq Er EIO
An I/O error occurred while reading from or writing to the file system.
.El
.Pp
.Fn fstatfs
fails if one or more of the following are true:
.Bl -tag -width Er
.It Bq Er EBADF
.Fa fd
is not a valid open file descriptor.
.It Bq Er EFAULT
.Fa buf
points to an invalid address.
.It Bq Er EIO
An I/O error occurred while reading from or writing to the file system.
.El
.Sh SEE ALSO
.Xr df 1 ,
.Xr getfsstat 2 ,
.Xr mount 2 ,
.Xr stat 2
.Sh HISTORY
The
.Fn statfs
function first appeared in
.Bx 4.3 Reno .
