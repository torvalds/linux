.\"	$OpenBSD: chmod.2,v 1.29 2025/05/20 02:43:01 kn Exp $
.\"	$NetBSD: chmod.2,v 1.7 1995/02/27 12:32:06 cgd Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)chmod.2	8.1 (Berkeley) 6/4/93
.\"
.Dd $Mdocdate: May 20 2025 $
.Dt CHMOD 2
.Os
.Sh NAME
.Nm chmod ,
.Nm fchmodat ,
.Nm fchmod
.Nd change mode of file
.Sh SYNOPSIS
.In sys/stat.h
.Ft int
.Fn chmod "const char *path" "mode_t mode"
.Ft int
.Fn fchmod "int fd" "mode_t mode"
.In sys/stat.h
.In fcntl.h
.Ft int
.Fn fchmodat "int fd" "const char *path" "mode_t mode" "int flag"
.Sh DESCRIPTION
The
.Fn chmod
function sets the file permission bits of the file specified by the pathname
.Fa path
to
.Fa mode .
.Fn chmod
verifies that the process owner (user) either owns the specified file
or is the superuser.
.Pp
The
.Fa mode
argument is the bitwise OR of zero or more of the permission bit masks
from the following list:
.Bd -literal -offset indent
#define S_IRWXU 0000700    /* RWX mask for owner */
#define S_IRUSR 0000400    /* R for owner */
#define S_IWUSR 0000200    /* W for owner */
#define S_IXUSR 0000100    /* X for owner */

#define S_IRWXG 0000070    /* RWX mask for group */
#define S_IRGRP 0000040    /* R for group */
#define S_IWGRP 0000020    /* W for group */
#define S_IXGRP 0000010    /* X for group */

#define S_IRWXO 0000007    /* RWX mask for other */
#define S_IROTH 0000004    /* R for other */
#define S_IWOTH 0000002    /* W for other */
#define S_IXOTH 0000001    /* X for other */

#define S_ISUID 0004000    /* set user id on execution */
#define S_ISGID 0002000    /* set group id on execution */
#define S_ISVTX 0001000    /* save swapped text even after use */
.Ed
.Pp
Mode
.Dv ISVTX
(the
.Em sticky bit )
on a file has no effect, although the superuser can still set it.
If it is set on a directory, an unprivileged user may not delete or rename
files of other users in that directory.
The sticky bit may be set by any user on a directory which the user owns
or has appropriate permissions.
For more details of the properties of the sticky bit, see
.Xr sticky 8 .
.Pp
Writing or changing the owner of a file turns off the set-user-ID and
set-group-ID bits unless the user is the superuser.
This makes the system somewhat more secure by protecting
set-user-ID (set-group-ID) files from remaining set-user-ID (set-group-ID)
if they are modified, at the expense of a degree of compatibility.
.Pp
The
.Fn fchmodat
function is equivalent to
.Fn chmod
except in the case where
.Fa path
specifies a relative path.
In this case the file to be changed is determined relative to the directory
associated with the file descriptor
.Fa fd
instead of the current working directory.
.Pp
If
.Fn fchmodat
is passed the special value
.Dv AT_FDCWD
(defined in
.In fcntl.h )
in the
.Fa fd
parameter, the current working directory is used.
If
.Fa flag
is also zero, the behavior is identical to a call to
.Fn chmod .
.Pp
The
.Fa flag
argument is the bitwise OR of zero or more of the following values:
.Pp
.Bl -tag -width AT_SYMLINK_NOFOLLOW -offset indent -compact
.It Dv AT_SYMLINK_NOFOLLOW
If
.Fa path
names a symbolic link, then the mode of the symbolic link is changed.
.El
.Pp
The
.Fn fchmod
function is equivalent to
.Fn chmod
except that the file whose permissions are changed is specified
by the file descriptor
.Fa fd .
.Sh RETURN VALUES
.Rv -std
.Sh ERRORS
The
.Fn chmod
and
.Fn fchmodat
functions will fail and the file mode will be unchanged if:
.Bl -tag -width Er
.It Bq Er ENOTDIR
A component of the path prefix is not a directory.
.It Bq Er ENAMETOOLONG
A component of a pathname exceeded
.Dv NAME_MAX
characters, or an entire pathname (including the terminating NUL)
exceeded
.Dv PATH_MAX
bytes.
.It Bq Er ENOENT
The named file does not exist.
.It Bq Er EACCES
Search permission is denied for a component of the path prefix.
.It Bq Er EINVAL
.Fa mode
contains bits other than the file type and those described above.
.It Bq Er ELOOP
Too many symbolic links were encountered in translating the pathname.
.It Bq Er EPERM
The effective user ID does not match the owner of the file and
the effective user ID is not the superuser.
.It Bq Er EROFS
The named file resides on a read-only file system.
.It Bq Er EFAULT
.Fa path
points outside the process's allocated address space.
.It Bq Er EIO
An I/O error occurred while reading from or writing to the file system.
.It Bq Er EFTYPE
An unprivileged user attempted to set a file's mode to
.Dv ISVTX .
.El
.Pp
Additionally, the
.Fn fchmodat
function will fail if:
.Bl -tag -width Er
.It Bq Er EINVAL
The value of the
.Fa flag
argument was neither zero nor
.Dv AT_SYMLINK_NOFOLLOW .
.It Bq Er EBADF
The
.Fa path
argument specifies a relative path and the
.Fa fd
argument is neither
.Dv AT_FDCWD
nor a valid file descriptor.
.It Bq Er ENOTDIR
The
.Fa path
argument specifies a relative path and the
.Fa fd
argument is a valid file descriptor but it does not reference a directory.
.It Bq Er EOPNOTSUPP
The
.Fa flag
argument specifies
.Dv AT_SYMLINK_NOFOLLOW
on a symbolic link and the file system does not support that operation.
.It Bq Er EACCES
The
.Fa path
argument specifies a relative path but search permission is denied
for the directory which the
.Fa fd
file descriptor references.
.El
.Pp
.Fn fchmod
will fail and the file mode will be unchanged if:
.Bl -tag -width Er
.It Bq Er EBADF
The descriptor is not valid.
.It Bq Er EINVAL
.Fa fd
refers to a socket, not to a file.
.It Bq Er EINVAL
.Fa mode
contains bits other than the file type and those described above.
.It Bq Er EPERM
The effective user ID does not match the owner of the file and
the effective user ID is not the superuser.
.It Bq Er EROFS
The file resides on a read-only file system.
.It Bq Er EIO
An I/O error occurred while reading from or writing to the file system.
.El
.Sh SEE ALSO
.Xr chmod 1 ,
.Xr chown 2 ,
.Xr open 2 ,
.Xr stat 2 ,
.Xr sticky 8
.Sh STANDARDS
The
.Fn chmod ,
.Fn fchmod ,
and
.Fn fchmodat
functions are expected to conform to
.St -p1003.1-2008 .
.Sh HISTORY
The
.Fn chmod
system call first appeared in
.At v1 ;
.Fn fchmod
in
.Bx 4.1c ;
and
.Fn fchmodat
has been available since
.Ox 5.0 .
