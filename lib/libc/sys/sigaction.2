.\"	$OpenBSD: sigaction.2,v 1.79 2024/07/14 03:53:18 jsg Exp $
.\"	$NetBSD: sigaction.2,v 1.7 1995/10/12 15:41:16 jtc Exp $
.\"
.\" Copyright (c) 1980, 1990, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@(#)sigaction.2	8.2 (Berkeley) 4/3/94
.\"
.Dd $Mdocdate: July 14 2024 $
.Dt SIGACTION 2
.Os
.Sh NAME
.Nm sigaction
.Nd software signal facilities
.Sh SYNOPSIS
.In signal.h
.Bd -literal
struct sigaction {
	union {		/* signal handler */
		void	(*__sa_handler)(int);
		void	(*__sa_sigaction)(int, siginfo_t *, void *);
	} __sigaction_u;
	sigset_t sa_mask;          /* signal mask to apply */
	int	 sa_flags;         /* see signal options below */
};
.Ed
.Pp
.Fd #define sa_handler	__sigaction_u.__sa_handler
.Fd #define sa_sigaction	__sigaction_u.__sa_sigaction
.Ft int
.Fn sigaction "int sig" "const struct sigaction *act" "struct sigaction *oact"
.Sh DESCRIPTION
The system defines a set of signals that may be delivered to a process.
Signal delivery resembles the occurrence of a hardware interrupt:
the signal is normally blocked from further occurrence, the current process
context is saved, and a new one is built.
A process may specify a
.Em handler
to which a signal is delivered, or specify that a signal is to be
.Em ignored .
A process may also specify that a default action is to be taken
by the system when a signal occurs.
A signal may also be
.Em blocked ,
in which case its delivery is postponed until it is
.Em unblocked .
The action to be taken on delivery is determined at the time
of delivery.
Normally, signal handlers execute on the current stack
of the process.
This may be changed, on a per-handler basis,
so that signals are taken on a special
.Em "signal stack" .
.Pp
Signal routines normally execute with the signal that caused their
invocation
.Em blocked ,
but other signals may yet occur.
A global
.Em "signal mask"
defines the set of signals currently blocked from delivery
to a process.
The signal mask for a process is initialized from that of its
parent (normally empty).
It may be changed with a
.Xr sigprocmask 2
call, or when a signal is delivered to the process.
.Pp
When a signal
condition arises for a process, the signal is added to a set of
signals pending for the process.
If the signal is not currently
.Em blocked
by the process then it is delivered to the process.
Signals may be delivered any time a process enters the operating system
(e.g., during a system call, page fault or trap, or clock interrupt).
If multiple signals are ready to be delivered at the same time,
any signals that could be caused by traps are delivered first.
Additional signals may be processed at the same time, with each
appearing to interrupt the handlers for the previous signals
before their first instructions.
The set of pending signals is returned by the
.Xr sigpending 2
function.
When a caught signal
is delivered, the current state of the process is saved,
a new signal mask is calculated (as described below),
and the signal handler is invoked.
The call to the handler is arranged so that if the signal handling routine
returns normally the process will resume execution in the context from
before the signal's delivery.
If the process wishes to resume in a different context, then it
must arrange to restore the previous context itself.
.Pp
When a signal is delivered to a process, a new signal mask is
installed for the duration of the process' signal handler
(or until a
.Xr sigprocmask 2
call is made).
This mask is formed by taking the union of the current signal mask set,
the signal to be delivered, and the signal mask
.Fa sa_mask
associated with the handler to be invoked, but always excluding
.Dv SIGKILL
and
.Dv SIGSTOP .
.Pp
.Fn sigaction
assigns an action for a signal specified by
.Fa sig .
If
.Fa act
is non-zero, it
specifies an action
.Pf ( Dv SIG_DFL ,
.Dv SIG_IGN ,
or a handler routine) and mask
to be used when delivering the specified signal.
If
.Fa oact
is non-zero, the previous handling information for the signal
is returned to the user.
.Pp
Once a signal handler is installed, it normally remains installed
until another
.Fn sigaction
call is made, or an
.Xr execve 2
is performed.
The value of
.Fa sa_handler
(or, if the
.Dv SA_SIGINFO
flag is set, the value of
.Fa sa_sigaction
instead) indicates what action should be performed when a
signal arrives.
A signal-specific default action may be reset by
setting
.Fa sa_handler
to
.Dv SIG_DFL .
Alternately, if the
.Dv SA_RESETHAND
flag is set the default action will be reinstated when the signal
is first posted.
The defaults are process termination, possibly with core dump;
no action; stopping the process; or continuing the process.
See the signal list below for each signal's default action.
If
.Fa sa_handler
is
.Dv SIG_DFL ,
the default action for the signal is to discard the signal,
and if a signal is pending,
the pending signal is discarded even if the signal is masked.
If
.Fa sa_handler
is set to
.Dv SIG_IGN ,
current and pending instances
of the signal are ignored and discarded.
If
.Fa sig
is
.Dv SIGCHLD
and
.Fa sa_handler
is set to
.Dv SIG_IGN ,
the
.Dv SA_NOCLDWAIT
flag (described below) is implied.
.Pp
The signal mask
.Fa sa_mask
is typically manipulated using the
.Xr sigaddset 3
family of functions.
.Pp
Options may be specified by setting
.Fa sa_flags .
The meaning of the various bits is as follows:
.Bl -tag -offset indent -width SA_RESETHANDXX
.It Dv SA_NOCLDSTOP
If this bit is set when installing a catching function
for the
.Dv SIGCHLD
signal,
the
.Dv SIGCHLD
signal will be generated only when a child process exits,
not when a child process stops.
.It Dv SA_NOCLDWAIT
If this bit is set when calling
.Fn sigaction
for the
.Dv SIGCHLD
signal, the system will not create zombie processes when children of
the calling process exit,
though existing zombies will remain.
If the calling process subsequently issues a
.Xr waitpid 2
(or equivalent) and there are no previously existing zombie child
processes that match the
.Xr waitpid 2
criteria,
it blocks until all of the calling process's child
processes that would match terminate,
and then returns a value of \-1 with
.Va errno
set to
.Er ECHILD .
.It Dv SA_ONSTACK
If this bit is set, the system will deliver the signal to the process
on a
.Em "signal stack" ,
specified with
.Xr sigaltstack 2 .
.It Dv SA_NODEFER
If this bit is set, further occurrences of the delivered signal are
not masked during the execution of the handler.
.It Dv SA_RESETHAND
If this bit is set, the handler is reset back to
.Dv SIG_DFL
at the moment the signal is delivered.
.It Dv SA_SIGINFO
If this bit is set, the 2nd argument of the handler is set to
be a pointer to a
.Em siginfo_t
structure as described in
.In sys/siginfo.h .
It provides much more information about the causes and
attributes of the signal that is being delivered.
.It Dv SA_RESTART
If a signal is caught during the system calls listed below,
the call may be forced to terminate
with the error
.Er EINTR ,
the call may return with a data transfer shorter than requested,
or the call may be restarted.
Restarting of pending calls is requested
by setting the
.Dv SA_RESTART
bit in
.Fa sa_flags .
The affected system calls include
.Xr read 2 ,
.Xr write 2 ,
.Xr sendto 2 ,
.Xr recvfrom 2 ,
.Xr sendmsg 2
and
.Xr recvmsg 2
on a communications channel or a slow device (such as a terminal,
but not a regular file)
and during a
.Xr wait 2
or
.Xr ioctl 2 .
However, calls that have already committed are not restarted,
but instead return a partial success (for example, a short read count).
.El
.Pp
After a
.Xr fork 2
or
.Xr vfork 2 ,
all signals, the signal mask, the signal stack,
and the restart/interrupt flags are inherited by the child.
.Pp
.Xr execve 2
reinstates the default
action for
.Dv SIGCHLD
and all signals which were caught; all other signals remain ignored.
All signals are reset to be caught on the user stack and
the signal mask remains the same;
signals that restart pending system calls continue to do so.
.Pp
The following is a list of all signals
with names as in the include file
.In signal.h :
.Bl -column "SIGVTALARM" "create core image" "Description"
.It Sy "Name" Ta Sy "Default Action" Ta Sy "Description"
.It Dv SIGHUP Ta "terminate process" Ta "terminal line hangup"
.It Dv SIGINT Ta "terminate process" Ta "interrupt program"
.It Dv SIGQUIT Ta "create core image" Ta "quit program"
.It Dv SIGILL Ta "create core image" Ta "illegal instruction"
.It Dv SIGTRAP Ta "create core image" Ta "trace trap"
.It Dv SIGABRT Ta "create core image" Ta "abort(3) call (formerly SIGIOT)"
.It Dv SIGEMT Ta "create core image" Ta "emulate instruction executed"
.It Dv SIGFPE Ta "create core image" Ta "floating-point exception"
.It Dv SIGKILL Ta "terminate process" Ta "kill program (cannot be caught or ignored)"
.It Dv SIGBUS Ta "create core image" Ta "bus error"
.It Dv SIGSEGV Ta "create core image" Ta "segmentation violation"
.It Dv SIGSYS Ta "create core image" Ta "system call given invalid argument"
.It Dv SIGPIPE Ta "terminate process" Ta "write on a pipe with no reader"
.It Dv SIGALRM Ta "terminate process" Ta "real-time timer expired"
.It Dv SIGTERM Ta "terminate process" Ta "software termination signal"
.It Dv SIGURG Ta "discard signal" Ta "urgent condition present on socket"
.It Dv SIGSTOP Ta "stop process" Ta "stop (cannot be caught or ignored)"
.It Dv SIGTSTP Ta "stop process" Ta "stop signal generated from keyboard"
.It Dv SIGCONT Ta "discard signal" Ta "continue after stop"
.It Dv SIGCHLD Ta "discard signal" Ta "child status has changed"
.It Dv SIGTTIN Ta "stop process" Ta "background read attempted from controlling terminal"
.It Dv SIGTTOU Ta "stop process" Ta "background write attempted to controlling terminal"
.It Dv SIGIO Ta "discard signal" Ta "I/O is possible on a descriptor (see"
.Xr fcntl 2 )
.It Dv SIGXCPU Ta "terminate process" Ta "CPU time limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGXFSZ Ta "terminate process" Ta "file size limit exceeded (see"
.Xr setrlimit 2 )
.It Dv SIGVTALRM Ta "terminate process" Ta "virtual time alarm (see"
.Xr setitimer 2 )
.It Dv SIGPROF Ta "terminate process" Ta "profiling timer alarm (see"
.Xr setitimer 2 )
.It Dv SIGWINCH Ta "discard signal" Ta "window size change"
.It Dv SIGINFO Ta "discard signal" Ta "status request from keyboard"
.It Dv SIGUSR1 Ta "terminate process" Ta "user defined signal 1"
.It Dv SIGUSR2 Ta "terminate process" Ta "user defined signal 2"
.It Dv SIGTHR Ta "discard signal" Ta "thread AST"
.El
.Sh RETURN VALUES
.Rv -std
.Sh EXAMPLES
The handler routine can be declared:
.Bd -literal -offset indent
void
handler(int sig)
.Pp
.Ed
If the
.Dv SA_SIGINFO
option is enabled, the canonical way to declare it is:
.Bd -literal -offset indent
void
handler(int sig, siginfo_t *sip, void *ctx)
.Ed
.Pp
Here
.Fa sig
is the signal number, into which the hardware faults and traps are mapped.
If the
.Dv SA_SIGINFO
option is set,
.Fa sip
is a pointer to a
.Dv siginfo_t
as described in
.In sys/siginfo.h .
If
.Dv SA_SIGINFO
is not set, this pointer will be
.Dv NULL
instead.
The function specified in
.Fa sa_sigaction
will be called instead of the function specified by
.Fa sa_handler
(note that in some implementations these are in fact the same).
.Fa ctx
may be cast to a pointer to
.Fa ucontext_t
which can be used to restore the thread's context from before the signal.
On
.Ox ,
.Fa ucontext_t
is an alias for the
.Fa sigcontext
structure defined in
.In signal.h .
The contents of this structure are machine-dependent.
.Sh ERRORS
.Fn sigaction
will fail and no new signal handler will be installed if one
of the following occurs:
.Bl -tag -width Er
.It Bq Er EFAULT
Either
.Fa act
or
.Fa oact
points to memory that is not a valid part of the process
address space.
.It Bq Er EINVAL
.Fa sig
is not a valid signal number.
.It Bq Er EINVAL
An attempt is made to ignore or supply a handler for
.Dv SIGKILL
or
.Dv SIGSTOP .
.El
.Sh SEE ALSO
.Xr kill 1 ,
.Xr kill 2 ,
.Xr ptrace 2 ,
.Xr sigaltstack 2 ,
.Xr sigprocmask 2 ,
.Xr sigsuspend 2 ,
.Xr wait 2 ,
.Xr setjmp 3 ,
.Xr sigaddset 3 ,
.Xr sigblock 3 ,
.Xr sigpause 3 ,
.Xr sigvec 3 ,
.Xr tty 4
.Sh STANDARDS
The
.Fn sigaction
function conforms to
.St -p1003.1-2008 .
.Pp
The
.Dv SA_ONSTACK
flag and the
.Dv SIGPROF ,
.Dv SIGSYS ,
.Dv SIGTRAP ,
.Dv SIGVTALRM ,
.Dv SIGXCPU ,
and
.Dv SIGXFSZ
signals conform to the X/Open System Interfaces option of that standard.
The standard marks
.Dv SIGPROF
as obsolescent.
The signals
.Dv SIGEMT ,
.Dv SIGINFO ,
.Dv SIGIO ,
and
.Dv SIGWINCH
are Berkeley extensions.
These signals are available on most
.Bx Ns -derived
systems.
The
.Dv SIGTHR
signal is specific to
.Ox
and is part of the
implementation of thread cancellation;
.Fa sigaction
and other signal interfaces may reject attempts to use or alter the
handling of
.Dv SIGTHR .
.Pp
Signal handlers should be as minimal as possible, and use only signal-safe
operations.
The safest handlers only change a single variable of type
.Va volatile sig_atomic_t ,
which is inspected by an event loop.
Other variables accessed inside the handler must be either const, or
local to the handler.
More complicated global variables (such as strings, structs, or lists)
will require external methods to guarantee consistency, such as
signal-blocking with
.Xr sigprocmask 2 .
.Pp
More complicated handlers must restrict themselves to calling only the following
list of signal-safe functions directly.
Avoid abstracting the work to helper functions which are also called from
other contexts because future coders will forget the signal-safe requirement.
.Pp
Standard Interfaces:
.Pp
.Fn _exit ,
.Fn _Exit ,
.Fn abort ,
.Fn accept ,
.Fn access ,
.Fn alarm ,
.Fn bind ,
.Fn cfgetispeed ,
.Fn cfgetospeed ,
.Fn cfsetispeed ,
.Fn cfsetospeed ,
.Fn chdir ,
.Fn chmod ,
.Fn chown ,
.Fn clock_gettime ,
.Fn close ,
.Fn connect ,
.Fn creat ,
.Fn dup ,
.Fn dup2 ,
.Fn execl ,
.Fn execle ,
.Fn execv ,
.Fn execve ,
.Fn faccessat ,
.Fn fchdir ,
.Fn fchmod ,
.Fn fchmodat ,
.Fn fchown ,
.Fn fchownat ,
.Fn fcntl ,
.Fn fdatasync ,
.Fn fork ,
.Fn fpathconf ,
.Fn fstat ,
.Fn fstatat ,
.Fn fsync ,
.Fn ftruncate ,
.Fn futimens ,
.Fn futimes ,
.Fn getegid ,
.Fn geteuid ,
.Fn getgid ,
.Fn getgroups ,
.Fn getpeername ,
.Fn getpgrp ,
.Fn getpid ,
.Fn getppid ,
.Fn getsockname ,
.Fn getsockopt ,
.Fn getuid ,
.Fn kill ,
.Fn link ,
.Fn linkat ,
.Fn listen ,
.Fn lseek ,
.Fn lstat ,
.Fn mkdir ,
.Fn mkdirat ,
.Fn mkfifo ,
.Fn mkfifoat ,
.Fn mknod ,
.Fn mknodat ,
.Fn open ,
.Fn openat ,
.Fn pathconf ,
.Fn pause ,
.Fn pipe ,
.Fn poll ,
.Fn pselect ,
.Fn pthread_sigmask ,
.Fn raise ,
.Fn read ,
.Fn readlink ,
.Fn readlinkat ,
.Fn recv ,
.Fn recvfrom ,
.Fn recvmsg ,
.Fn rename ,
.Fn renameat ,
.Fn rmdir ,
.Fn select ,
.Fn send ,
.Fn sendmsg ,
.Fn sendto ,
.Fn setgid ,
.Fn setpgid ,
.Fn setsid ,
.Fn setsockopt ,
.Fn setuid ,
.Fn shutdown ,
.Fn sigaction ,
.Fn sigaddset ,
.Fn sigdelset ,
.Fn sigemptyset ,
.Fn sigfillset  ,
.Fn sigismember ,
.Fn signal ,
.Fn sigpause ,
.Fn sigpending ,
.Fn sigprocmask ,
.Fn sigsuspend ,
.Fn sleep ,
.Fn sockatmark ,
.Fn socket ,
.Fn socketpair ,
.Fn stat ,
.Fn strcat ,
.Fn strcpy ,
.Fn strncat ,
.Fn strncpy ,
.Fn symlink ,
.Fn symlinkat ,
.Fn sysconf ,
.Fn tcdrain ,
.Fn tcflow ,
.Fn tcflush ,
.Fn tcgetattr ,
.Fn tcgetpgrp ,
.Fn tcsendbreak ,
.Fn tcsetattr ,
.Fn tcsetpgrp ,
.Fn time ,
.Fn times ,
.Fn umask ,
.Fn uname ,
.Fn unlink ,
.Fn unlinkat ,
.Fn utime ,
.Fn utimensat ,
.Fn utimes ,
.Fn wait ,
.Fn waitpid ,
.Fn write ,
and perhaps some others.
.\" unimplemented functions that should be async-sig-safe, if we had them
.\" POSIX Issue 7 additions
.\" .Pp
.\" .Fn fexecve .
.\"
.\" Realtime Interfaces:
.\" .Pp
.\" .Fn aio_error ,
.\" .Fn aio_return ,
.\" .Fn aio_suspend ,
.\" .Fn sem_post ,
.\" .Fn sigqueue ,
.\" .Fn timer_getoverrun ,
.\" .Fn timer_gettime ,
.\" .Fn timer_settime .
.Pp
Extension Interfaces:
.Pp
.Fn accept4 ,
.Fn chflags ,
.Fn chflagsat ,
.Fn dup3 ,
.Fn fchflags ,
.Fn getentropy ,
.Fn getresgid ,
.Fn getresuid ,
.Fn pipe2 ,
.Fn ppoll ,
.Fn sendsyslog ,
.Fn setresgid ,
.Fn setresuid ,
.Fn strlcat ,
.Fn strlcpy ,
.Fn wait3 ,
.Fn wait4 .
.Pp
Since signal-safe functions can encounter system call errors,
.Va errno
should be protected inside the handler with the following pattern:
.Bd -literal -offset indent
void
handler(int sig)
{
	int save_errno = errno;

	...
	errno = save_errno;
}
.Ed
.Pp
On
.Ox ,
a few more functions are signal-safe (except when the format string contains
floating-point arguments).
These functions are expected to be unsafe on other systems, so be very cautious of
the portability trap!
.Pp
.Bl -tag -offset indent -compact -width foofoofoofoo
.It Fn dprintf
Safe.
.It Fn vdprintf
Safe.
.It Fn snprintf
Safe.
.It Fn vsnprintf
Safe.
.It Fn syslog_r
Safe if the
.Va syslog_data
struct is initialized as a local variable.
.El
