.\"	$OpenBSD: dup.2,v 1.21 2025/08/04 04:59:31 guenther Exp $
.\"	$NetBSD: dup.2,v 1.4 1995/02/27 12:32:21 cgd Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)dup.2	8.1 (Berkeley) 6/4/93
.\"
.Dd $Mdocdate: August 4 2025 $
.Dt DUP 2
.Os
.Sh NAME
.Nm dup ,
.Nm dup2 ,
.Nm dup3
.Nd duplicate an existing file descriptor
.Sh SYNOPSIS
.In unistd.h
.Ft int
.Fn dup "int oldd"
.Ft int
.Fn dup2 "int oldd" "int newd"
.In fcntl.h
.In unistd.h
.Ft int
.Fn dup3 "int oldd" "int newd" "int flags"
.Sh DESCRIPTION
.Fn dup
duplicates an existing object descriptor and returns its value to
the calling process
.Fa ( newd
=
.Fn dup oldd ) .
The argument
.Fa oldd
is a small non-negative integer index in the per-process descriptor table.
The value must be less than the size of the table, which is returned by
.Xr getdtablesize 3 .
The new descriptor returned by the call is the lowest numbered descriptor
currently not in use by the process.
.Pp
The object referenced by the descriptor does not distinguish between
.Fa oldd
and
.Fa newd
in any way.
Thus if
.Fa newd
and
.Fa oldd
are duplicate references to an open
file,
.Xr read 2 ,
.Xr write 2
and
.Xr lseek 2
calls all move a single pointer into the file,
and append mode, non-blocking I/O and asynchronous I/O options
are shared between the references.
If a separate pointer into the file is desired, a different
object reference to the file must be obtained by issuing an
additional
.Xr open 2
call.
The close-on-exec and close-on-fork flags on the new file descriptor
are unset.
.Pp
In
.Fn dup2 ,
the value of the new descriptor
.Fa newd
is specified.
If this descriptor is already in use, it is first deallocated as if a
.Xr close 2
call had been done first.
When
.Fa newd
equals
.Fa oldd ,
.Fn dup2
just returns without affecting the close-on-exec or close-on-fork flags.
.Pp
In
.Fn dup3 ,
the value of the new descriptor and the close-on-exec and close-on-fork
flags on
the new file descriptor are all specified:
.Fa newd
specifies the value and the
.Dv O_CLOEXEC
and
.Dv O_CLOFORK
bits in
.Fa flags
specify the close-on-exec and close-on-forks flag, respectively.
Unlike
.Fn dup2 ,
if
.Fa oldd
and
.Fa newd
are equal then
.Fn dup3
fails.
Otherwise, if
.Fa flags
is zero then
.Fn dup3
is identical to a call to
.Fn dup2 .
.Sh RETURN VALUES
Upon successful completion, the value of the new descriptor is returned.
The value \-1 is returned if an error occurs in either call.
The external variable
.Va errno
indicates the cause of the error.
.Sh ERRORS
.Fn dup
will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
.Fa oldd
is not a valid active descriptor.
.It Bq Er EMFILE
Too many descriptors are active.
.El
.Pp
.Fn dup2
and
.Fn dup3
will fail if:
.Bl -tag -width Er
.It Bq Er EBADF
.Fa oldd
is not a valid active descriptor or
.Fa newd
is negative or greater than or equal to the process's
.Dv RLIMIT_NOFILE
limit.
.It Bq Er EBUSY
A race condition with
.Xr accept 2
or
.Xr open 2
has been detected.
.It Bq Er EINTR
An interrupt was received.
.It Bq Er EIO
An I/O error occurred while writing to the file system.
.El
.Pp
In addition,
.Fn dup3
will return the following error:
.Bl -tag -width Er
.It Bq Er EINVAL
.Fa oldd
is equal to
.Fa newd
or
.Fa flags
is invalid.
.El
.Sh SEE ALSO
.Xr accept 2 ,
.Xr close 2 ,
.Xr fcntl 2 ,
.Xr getrlimit 2 ,
.Xr open 2 ,
.Xr pipe 2 ,
.Xr socket 2 ,
.Xr socketpair 2 ,
.Xr getdtablesize 3
.Sh STANDARDS
The
.Fn dup ,
.Fn dup2 ,
and
.Fn dup3
functions conform to
.St -p1003.1-2024 .
.Sh HISTORY
The
.Fn dup
system call first appeared in
.At v3 ,
.Fn dup2
in
.At v7 ,
and
.Fn dup3
in
.Ox 5.7 .
