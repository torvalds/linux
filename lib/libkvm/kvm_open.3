.\"	$OpenBSD: kvm_open.3,v 1.19 2025/06/06 21:53:13 schwarze Exp $
.\"	$NetBSD: kvm_open.3,v 1.2 1996/03/18 22:33:52 thorpej Exp $
.\"
.\" Copyright (c) 1992, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software developed by the Computer Systems
.\" Engineering group at Lawrence Berkeley Laboratory under DARPA contract
.\" BG 91-66 and contributed to Berkeley.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)kvm_open.3	8.3 (Berkeley) 4/19/94
.\"
.Dd $Mdocdate: June 6 2025 $
.Dt KVM_OPEN 3
.Os
.Sh NAME
.Nm kvm_open ,
.Nm kvm_openfiles ,
.Nm kvm_close
.Nd initialize kernel virtual memory access
.Sh SYNOPSIS
.Lb libkvm
.In fcntl.h
.In kvm.h
.Ft kvm_t *
.Fn kvm_open "const char *execfile" "const char *corefile" "const char *swapfile" "int flags" "const char *errstr"
.Ft kvm_t *
.Fn kvm_openfiles "const char *execfile" "const char *corefile" "const char *swapfile" "int flags" "char *errbuf"
.Ft int
.Fn kvm_close "kvm_t *kd"
.Sh DESCRIPTION
The functions
.Fn kvm_open
and
.Fn kvm_openfiles
return a descriptor used to access kernel virtual memory
via the
.Xr kvm 3
library routines.
Both active kernels and crash dumps are accessible through this interface.
.Pp
.Fa execfile
is the executable image of the kernel being examined.
This file must contain a symbol table.
If this argument is
.Dv NULL ,
the currently running system is assumed,
which is indicated by
.Dv _PATH_KSYMS ,
if it exists, otherwise
.Dv _PATH_UNIX
is used.
Both are defined in
.In paths.h .
.Pp
.Fa corefile
is the kernel memory device file.
It can be either
.Pa /dev/mem
or a crash dump core generated by
.Xr savecore 8 .
If
.Fa corefile
is
.Dv NULL ,
the default indicated by
.Dv _PATH_MEM
from
.In paths.h
is used.
.Pp
.Fa swapfile
should indicate the swap device.
If
.Dv NULL ,
no swap device will be used.
.Pp
The
.Fa flags
argument indicates read/write access as in
.Xr open 2
and applies only to the core file.
Only
.Dv O_RDONLY ,
.Dv O_WRONLY ,
and
.Dv O_RDWR
are permitted.
A special value
.Dv KVM_NO_FILES
can be specified which will cause no files to be opened and the handle
can only be used on live kernels on a limited subset of all kvm operations.
.Pp
There are two open routines which differ only with respect to
the error mechanism.
One provides backward compatibility with the SunOS kvm library, while the
other provides an improved error reporting framework.
.Pp
The
.Fn kvm_open
function is the Sun kvm compatible open call.
Here, the
.Fa errstr
argument indicates how errors should be handled.
If it is
.Dv NULL ,
no errors are reported and the application cannot know the
specific nature of the failed kvm call.
If it is not
.Dv NULL ,
errors are printed to stderr with
.Fa errstr
prepended to the message, as in
.Xr perror 3 .
Normally, the name of the program is used here.
The string is assumed to persist at least until the corresponding
.Fn kvm_close
call.
.Pp
The
.Fn kvm_openfiles
function provides
.Bx
style error reporting.
Here, error messages are not printed out by the library.
Instead, the application obtains the error message
corresponding to the most recent kvm library call using
.Fn kvm_geterr
(see
.Xr kvm_geterr 3 ) .
The results are undefined if the most recent kvm call did not produce
an error.
Since
.Fn kvm_geterr
requires a kvm descriptor, but the open routines return
.Dv NULL
on failure,
.Fn kvm_geterr
cannot be used to get the error message if open fails.
Thus,
.Fn kvm_openfiles
will place any error message in the
.Fa errbuf
argument.
This buffer should be
.Dv _POSIX2_LINE_MAX
characters large (from
.In limits.h ) .
.Sh RETURN VALUES
The
.Fn kvm_open
and
.Fn kvm_openfiles
functions both return a descriptor to be used
in all subsequent kvm library calls.
The library is fully re-entrant.
On failure,
.Dv NULL
is returned, in which case
.Fn kvm_openfiles
writes the error message into
.Fa errbuf .
.Pp
The
.Fn kvm_close
function returns 0 on success and \-1 on failure.
.Sh SEE ALSO
.Xr open 2 ,
.Xr kvm 3 ,
.Xr kvm_geterr 3 ,
.Xr kvm_getprocs 3 ,
.Xr kvm_nlist 3 ,
.Xr kvm_read 3
.Sh BUGS
There should not be two open calls.
The ill-defined error semantics of the Sun library and the desire to have
a backward-compatible library for
.Bx
left little choice.
