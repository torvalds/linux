.\" $OpenBSD: pthread_once.3,v 1.16 2025/06/07 00:16:52 schwarze Exp $
.\"
.\" Copyright (c) 1996 John Birrell <jb@cimlogic.com.au>.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by John Birrell.
.\" 4. Neither the name of the author nor the names of any co-contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD: pthread_once.3,v 1.5 1999/08/28 00:03:09 peter Exp $
.\"
.Dd $Mdocdate: June 7 2025 $
.Dt PTHREAD_ONCE 3
.Os
.Sh NAME
.Nm pthread_once
.Nd dynamic package initialization
.Sh SYNOPSIS
.Lb libpthread
.In pthread.h
.Vt pthread_once_t once_control No = Dv PTHREAD_ONCE_INIT ;
.Ft int
.Fn pthread_once "pthread_once_t *once_control" "void (*init_routine)(void)"
.Sh DESCRIPTION
The first call to
.Fn pthread_once
by any thread in a process, with a given
.Fa once_control ,
will call the
.Fn init_routine
with no arguments.
Subsequent calls to
.Fn pthread_once
with the same
.Fa once_control
will not call the
.Fn init_routine .
On return from
.Fn pthread_once ,
it is guaranteed that
.Fn init_routine
has completed.
The
.Fa once_control
parameter is used to determine whether the associated initialization
routine has been called.
.Pp
The function
.Fn pthread_once
is not a cancellation point.
However, if
.Fn init_routine
is a cancellation point and is cancelled, the effect on
.Va once_control
is as if
.Fn pthread_once
was never called.
.Pp
The constant
.Dv PTHREAD_ONCE_INIT
is defined in the header file
.In pthread.h .
.Pp
The behavior of
.Fn pthread_once
is undefined if
.Fa once_control
has automatic storage duration or is not initialized by
.Dv PTHREAD_ONCE_INIT .
.Sh RETURN VALUES
If successful, the
.Fn pthread_once
function will return zero.
Otherwise an error number will be returned to indicate the error.
.Sh ERRORS
None.
.Sh STANDARDS
.Fn pthread_once
conforms to
.St -p1003.1-96 .
