/*	$OpenBSD: runqlat.bt,v 1.3 2022/05/01 20:23:11 bluhm Exp $	*/

/*
 * runqlat.bt	Measure run queue latency (aka scheduler latency). OpenBSD.
 *
 * This measures the time from enqueue to on-cpu, for the same thread.
 *
 * WARNING: This traces scheduler functions, which can incur high overhead.
 * This is not suitable for 24x7 monitoring.
 *
 * Copyright (c) 2014 Brendan Gregg. All rights reserved.
 * Copyright (c) 2021 Martin Pieuchot. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * 19-Jun-2014	Brendan Gregg	Created this.
 * 08-Sep-2021	Martin Pieuchot Ported this to OpenBSD's btrace(8)
 */

/*
 * Work around multiple enqueue/dequeue cycles due to priority changes
 * before executing by registering only the first time a thread is put
 * on a scheduler queue.
 */
tracepoint:sched:enqueue
/@ts[arg0] == 0/
{
	/*
	 * For the enqueue and dequeue probes, arg0 is the thread ID.
	 */
	@ts[arg0] = nsecs
}

tracepoint:sched:on__cpu
/@ts[tid]/
{
	$usec = (nsecs - @ts[tid]) / 1000;
	@max_usec[0] = max($usec);
	@dist_usec = hist($usec);
	delete(@ts[tid]);
}

interval:hz:1
{
	time("%H:%M:%S  ");
	printf("Run queue latency (us):\n");
	print(@dist_usec);
	printf("Max run queue latency: %d ms\n", @max_usec[0] / 1000);
	clear(@dist_usec); clear(@max_usec);
}

END
{
	clear(@ts);
	time("%H:%M:%S  ");
	printf("Run queue latency (us):\n");
	print(@dist_usec);
	printf("Max run queue latency: %d ms\n", @max_usec[0] / 1000);
	clear(@dist_usec); clear(@max_usec);
}
