#!/bin/sh -
#
# THIS FILE AUTOMATICALLY GENERATED.  DO NOT EDIT.
# generated from:
#
#	OpenBSD: etc.powerpc64/MAKEDEV.md,v 1.11 2022/01/07 01:13:15 jsg Exp 
#	OpenBSD: MAKEDEV.common,v 1.120 2023/01/28 11:04:47 phessler Exp 
#	OpenBSD: MAKEDEV.mi,v 1.83 2016/09/11 03:06:31 deraadt Exp 
#	OpenBSD: MAKEDEV.sub,v 1.14 2005/02/07 06:14:18 david Exp 
#
#
# Copyright (c) 2001-2004 Todd T. Fries <todd@OpenBSD.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# Device "make" file.  Valid arguments:
#	all	makes all known devices, including local devices.
#		Tries to make the ``standard'' number of each type.
#	ramdisk	Ramdisk kernel devices
#	std	Standard devices
#	local	Configuration specific devices
# Disks:
#	vnd*	"file" pseudo-disk devices
#	rd*	"rd" pseudo-disks
#	sd*	SCSI disks, including flopticals
#	cd*	ATAPI and SCSI CD-ROM drives
#	wd*	"winchester" disk drives (ST506, IDE, ESDI, RLL, ...)
# Tapes:
#	ch*	SCSI media changers
#	st*	SCSI tape drives
# Terminal ports:
#	tty[0-7][0-9a-f]	NS16x50 serial ports
# Pseudo terminals:
#	ptm	pty master device
#	pty*	Set of 62 master pseudo terminals
#	tty*	Set of 62 slave pseudo terminals
# Console ports:
#	wscons	Minimal wscons devices
#	ttyC-J*	wscons display devices
#	wskbd*	wscons keyboards
#	wsmouse*	wscons mice
#	wsmux	wscons keyboard/mouse mux devices
# Printers:
#	lpt*	IEEE 1284 centronics printer
# USB devices:
#	ttyU*	USB serial ports
#	uall	All USB devices
#	ugen*	Generic USB devices
#	uhid*	Generic HID devices
#	fido	fido/* nodes
#	ujoy	ujoy/* nodes
#	ulpt*	Printer devices
#	usb*	Bus control devices used by usbd for attach/detach
# Special purpose devices:
#	audio*	Audio devices
#	bio	ioctl tunnel pseudo-device
#	bpf	Berkeley Packet Filter
#	diskmap	Disk mapper
#	dri	Direct Rendering Infrastructure
#	dt	Dynamic Tracer
#	fd	fd/* nodes
#	fuse	Userland Filesystem
#	hotplug	devices hot plugging
#	ipmi*	IPMI BMC access
#	kcov	Kernel code coverage tracing
#	pci*	PCI bus devices
#	pf	Packet Filter
#	pppx*	PPP Multiplexer
#	pppac*	PPP Access Concentrator
#	radio*	FM tuner devices
#	*random	In-kernel random data source
#	rmidi*	Raw MIDI devices
#	tap*	Ethernet tunnel driver
#	tun*	Network tunnel driver
#	uk*	Unknown SCSI devices
#	vscsi*	Virtual SCSI controller
#	kstat	Kernel Statistics
PATH=/sbin:/usr/sbin:/bin:/usr/bin
T=$0

# set this to echo for Echo-Only debugging
[ "$eo" ] || eo=

hex()
{
	case $1 in
	[0-9]) echo -n $1;;
	10) echo -n a;;
	11) echo -n b;;
	12) echo -n c;;
	13) echo -n d;;
	14) echo -n e;;
	15) echo -n f;;
	esac
}

alph2d()
{
	local t="$1"
	local p="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	local sub=${p%${t}*}
	echo ${#sub}
}

h2d()
{
	local s="$1"
	local f=${s%*[0-9a-f]} n=${s#[0-9a-f]*}

	echo $(($(_h2d $f)*16+ $(_h2d $n) ))
}

_h2d()
{
	case $1 in
	[0-9]) echo -n $1;;
	a) echo -n 10;;
	b) echo -n 11;;
	c) echo -n 12;;
	d) echo -n 13;;
	e) echo -n 14;;
	f) echo -n 15;;
	esac
}

unt()
{
	# XXX pdksh can't seem to deal with locally scoped variables
	# in ${foo#$bar} expansions
	arg="$1"
	tmp="${arg#[a-zA-Z]*}"
	tmp="${tmp%*[a-zA-Z]}"
	while [ "$tmp" != "$arg" ]
	do
		arg=$tmp
		tmp="${arg#[a-zA-Z]*}"
		tmp="${tmp%*[a-zA-Z]}"
	done
	echo $arg
}

dodisk()
{
	[ "$DEBUG" ] && set -x
	n=$(($((${5}*${7:-16}))+${6})) count=0
	[ 0$7 -ne 8 ] && l="i j k l m n o p"
	for d in a b c d e f g h $l
	do
		M $1$2$d	b $3 $(($n+$count)) 640 operator
		M r$1$2$d	c $4 $(($n+$count)) 640 operator
		let count=count+1
	done
}

dodisk2()
{
	n=$(($(($5*${7:-16}))+$6))
	M $1$2a b $3 $n 640 operator
	M r$1$2a c $4 $n 640 operator
	n=$(($n+2))
	M $1$2c b $3 $n 640 operator
	M r$1$2c c $4 $n 640 operator
}

# M name b/c major minor [mode] [group]
RMlist[0]="rm -f"

mkl() {
	: ${mklist[0]:=";mknod"}
	mklist[${#mklist[*]}]=" -m $1 $2 $3 $4 $5"
}

M() {
	RMlist[${#RMlist[*]}]=$1
	mkl ${5-666} $1 $2 $3 $4
	G=${6:-wheel}
	[ "$7" ] && {
		MKlist[${#MKlist[*]}]="&& chown $7:$G $1"
	} || {
		case $G in
		wheel)
			[ ${#whlist[*]} = 0 ] && whlist[0]="&& chgrp wheel"
			whlist[${#whlist[*]}]="$1"
		;;
		operator)
			[ ${#oplist[*]} = 0 ] && oplist[0]="&& chgrp operator"
			oplist[${#oplist[*]}]="$1"
		;;
		*)
			MKlist[${#MKlist[*]}]="&& chgrp $G $1";
		esac
	}
	return 0
}

R() {
[ "$DEBUG" ] && set -x
for i in "$@"
do
U=`unt $i`
[ "$U" ] || U=0

case $i in
boot)
	R ramdisk sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8 sd9
	M kexec	 	c 16 0 600
	;;
ramdisk)
	R std bpf sd0 tty00 tty01 rd0 bio diskmap
	R cd0 ttyC0 wskbd0 wskbd1 wskbd2 random
	;;

std)
	M console	c 0 0 600
	M tty		c 1 0
	M mem		c 2 0 640 kmem
	M kmem		c 2 1 640 kmem
	M null		c 2 2
	M zero		c 2 12
	M stdin		c 8 0
	M stdout	c 8 1
	M stderr	c 8 2
	M ksyms		c 3 0 640 kmem
	M klog		c 4 0 600
	M openprom	c 92 0 600
	M opalcons0	c 56 0 600
	;;

kstat)
	M kstat c 15 0 640
	;;

vscsi*)
	M vscsi$U c 83 $U 600
	;;

uk*)
	M uk$U c 70 $U 640 operator
	;;

tun*)
	M tun$U c 76 $U 600
	;;

tap*)
	M tap$U c 75 $U 600
	;;

rmidi*)
	M rmidi$U c 33 $U 660 _sndiop
	;;

*random)
	M urandom c 12 0 644
	RMlist[${#RMlist[*]}]=random
	MKlist[${#MKlist[*]}]=";ln -s urandom random"
	;;

radio*)
	M radio$U	c 34 $U
	MKlist[${#MKlist[*]}]=";[ -e radio ] || ln -s radio$U radio"
	;;

pppac*)
	M pppac$U c 73 $U 600
	;;

pppx*)
	M pppx$U c 72 $U 600
	;;

pf)
	M pf c 11 0 600
	;;

pci*)
	M pci$U	c 93 $U 600
	MKlist[${#MKlist[*]}]=";[ -h pci ] || ln -sf pci0 pci"
	;;

kcov)
	M kcov c 14 0 600
	;;

ipmi*)
	M ipmi$U c 88 $U 600
	;;

hotplug)
	M hotplug c 82 $U 400
	;;

fuse)
	M fuse$U c 81 $U 600
	;;

fd)
	RMlist[${#RMlist[*]}]=";mkdir -p fd;rm -f" n=0
	while [ $n -lt 64 ];do M fd/$n c 8 $n;n=$(($n+1));done
	MKlist[${#MKlist[*]}]=";chmod 555 fd"
	;;

dt)
	M dt c 13 0 600
	;;

dri)
	RMlist[${#RMlist[*]}]=";mkdir -p dri;rm -f"
	n=0
	while [ $n -lt 4 ]
	do
		M dri/card$n c 87 $n 600
		r=$(($n+128))
		M dri/renderD$r c 87 $r 600
		n=$(($n+1))
	done
	MKlist[${#MKlist[*]}]=";chmod 555 dri"
	;;

diskmap)
	M diskmap c 10 0 640 operator
	;;

bpf)
	M bpf c 9 0 600
	M bpf0 c 9 0 600
	;;

bio)
	M bio c 80 0 600
	;;

audio*)
	M audio$U	c 32 $U 660 _sndiop
	M audioctl$U	c 32 $(($U+192)) 660 _sndiop
	;;

usb*)
	[ "$i" = "usb" ] && u= || u=$U
	M usb$u c 48 $U 640
	;;

ulpt*)
	M ulpt$U c 65 $U 600
	;;

ujoy)
	RMlist[${#RMlist[*]}]=";mkdir -p ujoy;rm -f" n=0
	while [ $n -lt 4 ];do M ujoy/$n c 94 $n 444;n=$(($n+1));done
	MKlist[${#MKlist[*]}]=";chmod 555 ujoy"
	;;

fido)
	RMlist[${#RMlist[*]}]=";mkdir -p fido;rm -f" n=0
	while [ $n -lt 4 ];do M fido/$n c 51 $n 666;n=$(($n+1));done
	MKlist[${#MKlist[*]}]=";chmod 555 fido"
	;;

uhid*)
	M uhid$U c 50 $U 600
	;;

ugen*)
	n=$(($U*16))
	for j in 0{0,1,2,3,4,5,6,7,8,9} 1{0,1,2,3,4,5}
	do
		M ugen$U.$j c 49 $(($n+10#$j)) 600
	done
	;;

uall)
	R ttyU0 ttyU1 ttyU2 ttyU3 ugen0 ugen1 ugen2 ugen3 ugen4 ugen5
	R ugen6 ugen7 ulpt0 ulpt1 ujoy fido uhid0 uhid1 uhid2 uhid3
	R uhid4 uhid5 uhid6 uhid7 usb0 usb1 usb2 usb3 usb4 usb5 usb6
	R usb7
	;;

ttyU[0-9a-zA-Z])
	U=${i#ttyU*}
	o=$(alph2d $U)
	M ttyU$U c 58 $o 660 dialer root
	M cuaU$U c 58 $(($o+128)) 660 dialer root
	;;

lpt*|lpa*)
	case $i in
	lpt*) n=lpt f=0;;
	lpa*) n=lpa f=128;;
	esac
	M $n$U c 64 $(($U+$f)) 600
	;;

wsmux|wsmouse|wskbd)
	M wsmouse c 43 0 600
	M wskbd c 43 1 600
	;;

wsmouse[0-9]*)
	M wsmouse$U c 42 $U 600
	;;

wskbd[0-9]*)
	M wskbd$U c 41 $U 600
	;;

tty[C-J]*)
	U=${i##tty[C-J]}
	case $i in
	ttyC*) n=C m=0;;
	ttyD*) n=D m=256;;
	ttyE*) n=E m=512;;
	ttyF*) n=F m=768;;
	ttyG*) n=G m=1024;;
	ttyH*) n=H m=1280;;
	ttyI*) n=I m=1536;;
	ttyJ*) n=J m=1792;;
	esac
	case $U in
	[0-9a-f]) M tty$n$U c 40 $((16#$U+$m)) 600;;
	cfg) M tty${n}cfg c 40 $((255+$m)) 600;;
	*) echo bad unit $U for $i; exit 1;;
	esac
	;;

wscons)
	R wsmouse0 wsmouse1 wsmouse2 wsmouse3 wsmouse4 wsmouse5
	R wsmouse6 wsmouse7 wsmouse8 wsmouse9 wskbd0 wskbd1 wskbd2
	R wskbd3 wskbd4 wskbd5 wskbd6 wskbd7 wskbd8 wskbd9 wsmux
	R ttyCcfg ttyC0 ttyC1 ttyC2 ttyC3 ttyC4 ttyC5 ttyC6 ttyC7
	R ttyC8 ttyC9 ttyCa ttyCb
	;;

pty*)
	if [ $U -gt 15 ]; then
		echo bad unit for pty in: $i
		continue
	fi
	set -A letters p q r s t u v w x y z P Q R S T
	set -A suffixes 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q \
	    r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X \
	    Y Z

	name=${letters[$U]}
	n=0
	while [ $n -lt 62 ]
	do
		nam=$name${suffixes[$n]}
		off=$(($U*62))
		M tty$nam c 7 $(($off+$n))
		M pty$nam c 6 $(($off+$n))
		n=$(($n+1))
	done
	;;

ptm)
	M ptm c 5 0 666
	;;

tty[0-7][0-9a-f])
	U=${i#tty*}
	o=$(h2d $U)
	M tty$U c 57 $o 660 dialer root
	M cua$U c 57 $(($o+128)) 660 dialer root
	;;

st*)
	n=$(($U*16))
	for pre in " " n e en
	do
		M ${pre}rst$U	c 69 $n 660 operator
		n=$(($n+1))
	done
	;;

ch*)
	M ch$U c 68 $U 660 operator
	;;

cd*)
	dodisk2 cd $U 4 27 $U 0
	;;

rd*)
	dodisk2 rd $U 2 25 $U 0
	;;

vnd*)
	dodisk vnd $U 1 24 $U 0
	;;

local)
	test -s $T.local && sh $T.local
	;;

all)
	R vscsi0 vnd0 vnd1 vnd2 vnd3 tun0 tun1 tun2 tun3 tap0 tap1
	R tap2 tap3 sd0 sd1 sd2 sd3 sd4 sd5 sd6 sd7 sd8 sd9 rd0 pty0
	R ipmi0 dri diskmap cd0 cd1 bio audio0 audio1 audio2 audio3
	R kstat dt kcov bpf fuse pppac pppx hotplug ptm local wscons
	R pci0 pci1 pci2 pci3 uall rmidi0 rmidi1 rmidi2 rmidi3 rmidi4
	R rmidi5 rmidi6 rmidi7 radio0 uk0 random lpa0 lpa1 lpa2 lpt0
	R lpt1 lpt2 tty00 tty01 tty02 tty03 tty04 tty05 tty06 tty07
	R tty08 tty09 tty0a tty0b pf wd0 wd1 wd2 wd3 std st0 st1 fd
	;;

wd*|sd*)
	case $i in
	wd*) dodisk wd $U 5 17 $U 0;;
	sd*) dodisk sd $U 3 26 $U 0;;
	esac
	;;

*)
	echo $i: unknown device
	;;
esac
done
}
R "$@"
{
echo -n ${RMlist[*]}
echo -n ${mklist[*]}
echo -n ${MKlist[*]}
echo -n ${whlist[*]}
echo ${oplist[*]}
} | if [ "$eo" = "echo" ]; then
	cat
else
	sh
fi
