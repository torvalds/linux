LIB1ASMSRC = arm/lib1funcs.asm
LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func _call_via_rX _interwork_call_via_rX

# We want fine grained libraries, so use the new code to build the
# floating point emulation libraries.
FPBIT = fp-bit.c
DPBIT = dp-bit.c

fp-bit.c: $(srcdir)/config/fp-bit.c
	echo '#define FLOAT' > fp-bit.c
	echo '#ifndef __ARMEB__' >> fp-bit.c
	echo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c
	echo '#endif' >> fp-bit.c
	cat $(srcdir)/config/fp-bit.c >> fp-bit.c

dp-bit.c: $(srcdir)/config/fp-bit.c
	echo '#ifndef __ARMEB__' > dp-bit.c
	echo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c
	echo '#define FLOAT_WORD_ORDER_MISMATCH' >> dp-bit.c
	echo '#endif' >> dp-bit.c
	cat $(srcdir)/config/fp-bit.c >> dp-bit.c

MULTILIB_OPTIONS     = mbig-endian
MULTILIB_DIRNAMES    = be
MULTILIB_EXCEPTIONS  = 
MULTILIB_MATCHES     = mbig-endian=mbe mlittle-endian=mle

# Note XScale does not support hard FP

MULTILIB_OPTIONS    += mthumb-interwork
MULTILIB_DIRNAMES   += interwork

MULTILIB_OPTIONS    += mthumb
MULTILIB_DIRNAMES   += thumb
MULTILIB_EXCEPTIONS += *mhard-float/*mthumb*

MULTILIB_REDUNDANT_DIRS = interwork/thumb=thumb

# The iWMMXt multilibs are suppressed for now because gcc only
# supports generating them with the IWMMXT or AAPCS ABIs, neither of
# which is the default.  Until GCC can generate code for an iWMMXt
# which will work with the default ABI it is not possible to safely
# generate these multilibs.
#
# MULTILIB_OPTIONS    += mcpu=iwmmxt
# MULTILIB_DIRNAMES   += iwmmxt
# MULTILIB_REDUNDANT_DIRS += interwork/thumb/iwmmxt=thumb

EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o crti.o crtn.o

LIBGCC               = stmp-multilib
INSTALL_LIBGCC       = install-multilib

# Currently there is a bug somewhere in GCC's alias analysis
# or scheduling code that is breaking _fpmul_parts in fp-bit.c.
# Disabling function inlining is a workaround for this problem.
TARGET_LIBGCC2_CFLAGS = -fno-inline

# Assemble startup files.
$(T)crti.o: $(srcdir)/config/arm/crti.asm $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \
	-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/arm/crti.asm

$(T)crtn.o: $(srcdir)/config/arm/crtn.asm $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \
	-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/arm/crtn.asm
