import("//llvm/triples.gni")
import("//llvm/utils/gn/build/write_cmake_config.gni")
import("clang_pseudo_lit_site_cfg_files.gni")

template("write_lit_config") {
  write_cmake_config(target_name) {
    input = invoker.input
    output = invoker.output
    values = [
      "LIT_SITE_CFG_IN_HEADER=## Autogenerated from $input, do not edit",
      "LLVM_LIBS_DIR=",  # needed only for shared builds
    ]
    values += invoker.extra_values
  }
}

write_lit_config("lit_site_cfg") {
  # Fully-qualified instead of relative for LIT_SITE_CFG_IN_HEADER.
  input = "//clang-tools-extra/pseudo/test/lit.site.cfg.py.in"
  output = clang_pseudo_lit_site_cfg_file

  extra_values = [
    "CMAKE_CURRENT_BINARY_DIR=" +
        rebase_path(get_label_info("//clang-tools-extra/pseudo/test",
                                   "target_out_dir")),
    "CMAKE_CURRENT_SOURCE_DIR=" +
        rebase_path("//clang-tools-extra/pseudo/test"),

    "CURRENT_TOOLS_DIR=",
    "LLVM_LIT_TOOLS_DIR=",  # Intentionally empty, matches cmake build.
    "LLVM_TOOLS_DIR=" + rebase_path("$root_out_dir/bin"),
    "TARGET_TRIPLE=$llvm_target_triple",
    "Python3_EXECUTABLE=$python_path",
  ]
}

write_lit_config("lit_unit_site_cfg") {
  # Fully-qualified instead of relative for LIT_SITE_CFG_IN_HEADER.
  input = "//clang-tools-extra/pseudo/test/Unit/lit.site.cfg.py.in"
  output = clang_pseudo_lit_unit_site_cfg_file
  extra_values = [
    "CMAKE_CURRENT_BINARY_DIR=" +
        rebase_path(get_label_info("//clang-tools-extra/pseudo/unittests",
                                   "target_out_dir")),
    "CMAKE_CURRENT_SOURCE_DIR=" +
        rebase_path("//clang-tools-extra/pseudo/test"),
  ]
  if (host_os == "win") {
    # See comment for Windows solink in llvm/utils/gn/build/toolchain/BUILD.gn
    extra_values += [ "SHLIBDIR=" + rebase_path("$root_out_dir/bin") ]
  } else {
    extra_values += [ "SHLIBDIR=" + rebase_path("$root_out_dir/lib") ]
  }
}

# This target should contain all dependencies of check-pseudo.
# //:default depends on it, so that ninja's default target builds all
# prerequisites for check-clang but doesn't run check-clang itself.
group("test") {
  deps = [
    ":lit_site_cfg",
    ":lit_unit_site_cfg",
    "//clang-tools-extra/pseudo/tool:clang-pseudo",
    "//clang-tools-extra/pseudo/unittests:ClangPseudoTests",
    "//llvm/utils/FileCheck",
    "//llvm/utils/llvm-lit",
    "//llvm/utils/not",
  ]
  testonly = true
}

action("check-clang-pseudo") {
  script = "$root_out_dir/bin/llvm-lit"
  if (host_os == "win") {
    script += ".py"
  }
  args = [
    "-sv",
    rebase_path(get_path_info(clang_pseudo_lit_site_cfg_file, "dir"),
                root_out_dir),
  ]
  outputs = [ "$target_gen_dir/run-lit" ]  # Non-existing, so that ninja runs it
                                           # each time.

  # Since check-clang-pseudo is always dirty, //:default doesn't depend on it so
  # that it's not part of the default ninja target.  Hence, check-clang-pseudo
  # shouldn't have any deps except :test. so that the default target is sure to
  # build all the deps.
  deps = [ ":test" ]
  testonly = true

  pool = "//:console"
}
