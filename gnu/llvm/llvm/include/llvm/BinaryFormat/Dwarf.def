//===- llvm/Support/Dwarf.def - Dwarf definitions ---------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// Macros for running through Dwarf enumerators.
//
//===----------------------------------------------------------------------===//

// TODO: Add other DW-based macros.
#if !(defined HANDLE_DW_TAG || defined HANDLE_DW_AT ||                         \
      defined HANDLE_DW_FORM || defined HANDLE_DW_OP ||                        \
      defined HANDLE_DW_OP_LLVM_USEROP || defined HANDLE_DW_LANG ||            \
      defined HANDLE_DW_LNAME || defined HANDLE_DW_ATE ||                      \
      defined HANDLE_DW_VIRTUALITY || defined HANDLE_DW_DEFAULTED ||           \
      defined HANDLE_DW_CC || defined HANDLE_DW_LNS ||                         \
      defined HANDLE_DW_LNE || defined HANDLE_DW_LNCT ||                       \
      defined HANDLE_DW_MACRO || defined HANDLE_DW_MACRO_GNU ||                \
      defined HANDLE_MACRO_FLAG || defined HANDLE_DW_RLE ||                    \
      defined HANDLE_DW_LLE ||                                                 \
      (defined HANDLE_DW_CFA && defined HANDLE_DW_CFA_PRED) ||                 \
      defined HANDLE_DW_APPLE_PROPERTY || defined HANDLE_DW_UT ||              \
      defined HANDLE_DWARF_SECTION || defined HANDLE_DW_IDX ||                 \
      defined HANDLE_DW_END || defined HANDLE_DW_SECT)
#error "Missing macro definition of HANDLE_DW*"
#endif

#ifndef HANDLE_DW_TAG
#define HANDLE_DW_TAG(ID, NAME, VERSION, VENDOR, KIND)
#endif

// Note that DW_KIND is not a DWARF concept, but rather a way for us to
// generate a list of tags that belong together.
#ifndef DW_KIND_NONE
#define DW_KIND_NONE 0
#endif

#ifndef DW_KIND_TYPE
#define DW_KIND_TYPE 1
#endif

#ifndef HANDLE_DW_AT
#define HANDLE_DW_AT(ID, NAME, VERSION, VENDOR)
#endif

#ifndef HANDLE_DW_FORM
#define HANDLE_DW_FORM(ID, NAME, VERSION, VENDOR)
#endif

#ifndef HANDLE_DW_OP
#define HANDLE_DW_OP(ID, NAME, OPERANDS, ARITY, VERSION, VENDOR)
#endif

#ifndef HANDLE_DW_OP_LLVM_USEROP
#define HANDLE_DW_OP_LLVM_USEROP(ID, NAME)
#endif

#ifndef HANDLE_DW_LANG
#define HANDLE_DW_LANG(ID, NAME, LOWER_BOUND, VERSION, VENDOR)
#endif

#ifndef HANDLE_DW_LNAME
#define HANDLE_DW_LNAME(ID, NAME, DESC, LOWER_BOUND)
#endif

#ifndef HANDLE_DW_ATE
#define HANDLE_DW_ATE(ID, NAME, VERSION, VENDOR)
#endif

#ifndef HANDLE_DW_VIRTUALITY
#define HANDLE_DW_VIRTUALITY(ID, NAME)
#endif

#ifndef HANDLE_DW_DEFAULTED
#define HANDLE_DW_DEFAULTED(ID, NAME)
#endif

#ifndef HANDLE_DW_CC
#define HANDLE_DW_CC(ID, NAME)
#endif

#ifndef HANDLE_DW_LNS
#define HANDLE_DW_LNS(ID, NAME)
#endif

#ifndef HANDLE_DW_LNE
#define HANDLE_DW_LNE(ID, NAME)
#endif

#ifndef HANDLE_DW_LNCT
#define HANDLE_DW_LNCT(ID, NAME)
#endif

#ifndef HANDLE_DW_MACRO
#define HANDLE_DW_MACRO(ID, NAME)
#endif

#ifndef HANDLE_DW_MACRO_GNU
#define HANDLE_DW_MACRO_GNU(ID, NAME)
#endif

#ifndef HANDLE_MACRO_FLAG
#define HANDLE_MACRO_FLAG(ID, NAME)
#endif

#ifndef HANDLE_DW_RLE
#define HANDLE_DW_RLE(ID, NAME)
#endif

#ifndef HANDLE_DW_LLE
#define HANDLE_DW_LLE(ID, NAME)
#endif

#ifndef HANDLE_DW_CFA
#define HANDLE_DW_CFA(ID, NAME)
#endif

#ifndef HANDLE_DW_CFA_PRED
#define HANDLE_DW_CFA_PRED(ID, NAME, PRED)
#endif

#ifndef HANDLE_DW_APPLE_PROPERTY
#define HANDLE_DW_APPLE_PROPERTY(ID, NAME)
#endif

#ifndef HANDLE_DW_UT
#define HANDLE_DW_UT(ID, NAME)
#endif

#ifndef HANDLE_DWARF_SECTION
#define HANDLE_DWARF_SECTION(ENUM_NAME, ELF_NAME, CMDLINE_NAME, OPTION)
#endif

#ifndef HANDLE_DW_IDX
#define HANDLE_DW_IDX(ID, NAME)
#endif

#ifndef HANDLE_DW_END
#define HANDLE_DW_END(ID, NAME)
#endif

#ifndef HANDLE_DW_SECT
#define HANDLE_DW_SECT(ID, NAME)
#endif

HANDLE_DW_TAG(0x0000, null, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0001, array_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0002, class_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0003, entry_point, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0004, enumeration_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0005, formal_parameter, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0008, imported_declaration, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x000a, label, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x000b, lexical_block, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x000d, member, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x000f, pointer_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0010, reference_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0011, compile_unit, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0012, string_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0013, structure_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0015, subroutine_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0016, typedef, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0017, union_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0018, unspecified_parameters, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0019, variant, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x001a, common_block, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x001b, common_inclusion, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x001c, inheritance, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x001d, inlined_subroutine, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x001e, module, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x001f, ptr_to_member_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0020, set_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0021, subrange_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0022, with_stmt, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0023, access_declaration, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0024, base_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0025, catch_block, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0026, const_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0027, constant, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0028, enumerator, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0029, file_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x002a, friend, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x002b, namelist, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x002c, namelist_item, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x002d, packed_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x002e, subprogram, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x002f, template_type_parameter, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0030, template_value_parameter, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0031, thrown_type, 2, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0032, try_block, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0033, variant_part, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0034, variable, 2, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0035, volatile_type, 2, DWARF, DW_KIND_TYPE)
// New in DWARF v3:
HANDLE_DW_TAG(0x0036, dwarf_procedure, 3, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0037, restrict_type, 3, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0038, interface_type, 3, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0039, namespace, 3, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x003a, imported_module, 3, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x003b, unspecified_type, 3, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x003c, partial_unit, 3, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x003d, imported_unit, 3, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x003f, condition, 3, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0040, shared_type, 3, DWARF, DW_KIND_TYPE)
// New in DWARF v4:
HANDLE_DW_TAG(0x0041, type_unit, 4, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0042, rvalue_reference_type, 4, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0043, template_alias, 4, DWARF, DW_KIND_TYPE)
// New in DWARF v5:
HANDLE_DW_TAG(0x0044, coarray_type, 5, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0045, generic_subrange, 5, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0046, dynamic_type, 5, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0047, atomic_type, 5, DWARF, DW_KIND_TYPE)
HANDLE_DW_TAG(0x0048, call_site, 5, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x0049, call_site_parameter, 5, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x004a, skeleton_unit, 5, DWARF, DW_KIND_NONE)
HANDLE_DW_TAG(0x004b, immutable_type, 5, DWARF, DW_KIND_TYPE)
// Vendor extensions:
HANDLE_DW_TAG(0x4081, MIPS_loop, 0, MIPS, DW_KIND_NONE)
// Conflicting:
// HANDLE_DW_TAG(0x4081, HP_array_descriptor, 0, HP, DW_KIND_NONE)
HANDLE_DW_TAG(0x4101, format_label, 0, GNU, DW_KIND_NONE)
HANDLE_DW_TAG(0x4102, function_template, 0, GNU, DW_KIND_NONE)
HANDLE_DW_TAG(0x4103, class_template, 0, GNU, DW_KIND_NONE)

HANDLE_DW_TAG(0x4104, GNU_BINCL, 0, GNU, DW_KIND_NONE)
HANDLE_DW_TAG(0x4105, GNU_EINCL, 0, GNU, DW_KIND_NONE)
HANDLE_DW_TAG(0x4106, GNU_template_template_param, 0, GNU, DW_KIND_NONE)
HANDLE_DW_TAG(0x4107, GNU_template_parameter_pack, 0, GNU, DW_KIND_NONE)
HANDLE_DW_TAG(0x4108, GNU_formal_parameter_pack, 0, GNU, DW_KIND_NONE)
HANDLE_DW_TAG(0x4109, GNU_call_site, 0, GNU, DW_KIND_NONE)
HANDLE_DW_TAG(0x410a, GNU_call_site_parameter, 0, GNU, DW_KIND_NONE)

HANDLE_DW_TAG(0x4200, APPLE_property, 0, APPLE, DW_KIND_NONE)

HANDLE_DW_TAG(0x4201, SUN_function_template, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x4202, SUN_class_template, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x4203, SUN_struct_template, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x4204, SUN_union_template, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x4205, SUN_indirect_inheritance, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x4206, SUN_codeflags, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x4207, SUN_memop_info, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x4208, SUN_omp_child_func, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x4209, SUN_rtti_descriptor, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x420a, SUN_dtor_info, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x420b, SUN_dtor, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x420c, SUN_f90_interface, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x420d, SUN_fortran_vax_structure, 0, SUN, DW_KIND_NONE)
HANDLE_DW_TAG(0x42ff, SUN_hi, 0, SUN, DW_KIND_NONE)

// LLVM
HANDLE_DW_TAG(0x4300, LLVM_ptrauth_type, 0, LLVM, DW_KIND_TYPE)

// DSP-C/Starcore __circ, _rev
HANDLE_DW_TAG(0x5101, ALTIUM_circ_type, 0, ALTIUM, DW_KIND_NONE)
HANDLE_DW_TAG(0x5102, ALTIUM_mwa_circ_type, 0, ALTIUM, DW_KIND_NONE)
HANDLE_DW_TAG(0x5103, ALTIUM_rev_carry_type, 0, ALTIUM, DW_KIND_NONE)
// M16 __rom qualifier
HANDLE_DW_TAG(0x5111, ALTIUM_rom, 0, ALTIUM, DW_KIND_NONE)

// LLVM
HANDLE_DW_TAG(0x6000, LLVM_annotation, 0, LLVM, DW_KIND_NONE)

// Green Hills.
HANDLE_DW_TAG(0x8004, GHS_namespace, 0, GHS, DW_KIND_NONE)
HANDLE_DW_TAG(0x8005, GHS_using_namespace, 0, GHS, DW_KIND_NONE)
HANDLE_DW_TAG(0x8006, GHS_using_declaration, 0, GHS, DW_KIND_NONE)
HANDLE_DW_TAG(0x8007, GHS_template_templ_param, 0, GHS, DW_KIND_NONE)

// Unified Parallel C.
HANDLE_DW_TAG(0x8765, UPC_shared_type, 0, UPC, DW_KIND_NONE)
HANDLE_DW_TAG(0x8766, UPC_strict_type, 0, UPC, DW_KIND_NONE)
HANDLE_DW_TAG(0x8767, UPC_relaxed, 0, UPC, DW_KIND_NONE)

HANDLE_DW_TAG(0xa000, PGI_kanji_type, 0, PGI, DW_KIND_NONE)
HANDLE_DW_TAG(0xa020, PGI_interface_block, 0, PGI, DW_KIND_NONE)

HANDLE_DW_TAG(0xb000, BORLAND_property, 0, BORLAND, DW_KIND_NONE)
HANDLE_DW_TAG(0xb001, BORLAND_Delphi_string, 0, BORLAND, DW_KIND_TYPE)
HANDLE_DW_TAG(0xb002, BORLAND_Delphi_dynamic_array, 0, BORLAND, DW_KIND_TYPE)
HANDLE_DW_TAG(0xb003, BORLAND_Delphi_set, 0, BORLAND, DW_KIND_TYPE)
HANDLE_DW_TAG(0xb004, BORLAND_Delphi_variant, 0, BORLAND, DW_KIND_TYPE)

// Attributes.
HANDLE_DW_AT(0x01, sibling, 2, DWARF)
HANDLE_DW_AT(0x02, location, 2, DWARF)
HANDLE_DW_AT(0x03, name, 2, DWARF)
HANDLE_DW_AT(0x09, ordering, 2, DWARF)
HANDLE_DW_AT(0x0b, byte_size, 2, DWARF)
HANDLE_DW_AT(0x0c, bit_offset, 2, DWARF)
HANDLE_DW_AT(0x0d, bit_size, 2, DWARF)
HANDLE_DW_AT(0x10, stmt_list, 2, DWARF)
HANDLE_DW_AT(0x11, low_pc, 2, DWARF)
HANDLE_DW_AT(0x12, high_pc, 2, DWARF)
HANDLE_DW_AT(0x13, language, 2, DWARF)
HANDLE_DW_AT(0x15, discr, 2, DWARF)
HANDLE_DW_AT(0x16, discr_value, 2, DWARF)
HANDLE_DW_AT(0x17, visibility, 2, DWARF)
HANDLE_DW_AT(0x18, import, 2, DWARF)
HANDLE_DW_AT(0x19, string_length, 2, DWARF)
HANDLE_DW_AT(0x1a, common_reference, 2, DWARF)
HANDLE_DW_AT(0x1b, comp_dir, 2, DWARF)
HANDLE_DW_AT(0x1c, const_value, 2, DWARF)
HANDLE_DW_AT(0x1d, containing_type, 2, DWARF)
HANDLE_DW_AT(0x1e, default_value, 2, DWARF)
HANDLE_DW_AT(0x20, inline, 2, DWARF)
HANDLE_DW_AT(0x21, is_optional, 2, DWARF)
HANDLE_DW_AT(0x22, lower_bound, 2, DWARF)
HANDLE_DW_AT(0x25, producer, 2, DWARF)
HANDLE_DW_AT(0x27, prototyped, 2, DWARF)
HANDLE_DW_AT(0x2a, return_addr, 2, DWARF)
HANDLE_DW_AT(0x2c, start_scope, 2, DWARF)
HANDLE_DW_AT(0x2e, bit_stride, 2, DWARF)
HANDLE_DW_AT(0x2f, upper_bound, 2, DWARF)
HANDLE_DW_AT(0x31, abstract_origin, 2, DWARF)
HANDLE_DW_AT(0x32, accessibility, 2, DWARF)
HANDLE_DW_AT(0x33, address_class, 2, DWARF)
HANDLE_DW_AT(0x34, artificial, 2, DWARF)
HANDLE_DW_AT(0x35, base_types, 2, DWARF)
HANDLE_DW_AT(0x36, calling_convention, 2, DWARF)
HANDLE_DW_AT(0x37, count, 2, DWARF)
HANDLE_DW_AT(0x38, data_member_location, 2, DWARF)
HANDLE_DW_AT(0x39, decl_column, 2, DWARF)
HANDLE_DW_AT(0x3a, decl_file, 2, DWARF)
HANDLE_DW_AT(0x3b, decl_line, 2, DWARF)
HANDLE_DW_AT(0x3c, declaration, 2, DWARF)
HANDLE_DW_AT(0x3d, discr_list, 2, DWARF)
HANDLE_DW_AT(0x3e, encoding, 2, DWARF)
HANDLE_DW_AT(0x3f, external, 2, DWARF)
HANDLE_DW_AT(0x40, frame_base, 2, DWARF)
HANDLE_DW_AT(0x41, friend, 2, DWARF)
HANDLE_DW_AT(0x42, identifier_case, 2, DWARF)
HANDLE_DW_AT(0x43, macro_info, 2, DWARF)
HANDLE_DW_AT(0x44, namelist_item, 2, DWARF)
HANDLE_DW_AT(0x45, priority, 2, DWARF)
HANDLE_DW_AT(0x46, segment, 2, DWARF)
HANDLE_DW_AT(0x47, specification, 2, DWARF)
HANDLE_DW_AT(0x48, static_link, 2, DWARF)
HANDLE_DW_AT(0x49, type, 2, DWARF)
HANDLE_DW_AT(0x4a, use_location, 2, DWARF)
HANDLE_DW_AT(0x4b, variable_parameter, 2, DWARF)
HANDLE_DW_AT(0x4c, virtuality, 2, DWARF)
HANDLE_DW_AT(0x4d, vtable_elem_location, 2, DWARF)
// New in DWARF v3:
HANDLE_DW_AT(0x4e, allocated, 3, DWARF)
HANDLE_DW_AT(0x4f, associated, 3, DWARF)
HANDLE_DW_AT(0x50, data_location, 3, DWARF)
HANDLE_DW_AT(0x51, byte_stride, 3, DWARF)
HANDLE_DW_AT(0x52, entry_pc, 3, DWARF)
HANDLE_DW_AT(0x53, use_UTF8, 3, DWARF)
HANDLE_DW_AT(0x54, extension, 3, DWARF)
HANDLE_DW_AT(0x55, ranges, 3, DWARF)
HANDLE_DW_AT(0x56, trampoline, 3, DWARF)
HANDLE_DW_AT(0x57, call_column, 3, DWARF)
HANDLE_DW_AT(0x58, call_file, 3, DWARF)
HANDLE_DW_AT(0x59, call_line, 3, DWARF)
HANDLE_DW_AT(0x5a, description, 3, DWARF)
HANDLE_DW_AT(0x5b, binary_scale, 3, DWARF)
HANDLE_DW_AT(0x5c, decimal_scale, 3, DWARF)
HANDLE_DW_AT(0x5d, small, 3, DWARF)
HANDLE_DW_AT(0x5e, decimal_sign, 3, DWARF)
HANDLE_DW_AT(0x5f, digit_count, 3, DWARF)
HANDLE_DW_AT(0x60, picture_string, 3, DWARF)
HANDLE_DW_AT(0x61, mutable, 3, DWARF)
HANDLE_DW_AT(0x62, threads_scaled, 3, DWARF)
HANDLE_DW_AT(0x63, explicit, 3, DWARF)
HANDLE_DW_AT(0x64, object_pointer, 3, DWARF)
HANDLE_DW_AT(0x65, endianity, 3, DWARF)
HANDLE_DW_AT(0x66, elemental, 3, DWARF)
HANDLE_DW_AT(0x67, pure, 3, DWARF)
HANDLE_DW_AT(0x68, recursive, 3, DWARF)
// New in DWARF v4:
HANDLE_DW_AT(0x69, signature, 4, DWARF)
HANDLE_DW_AT(0x6a, main_subprogram, 4, DWARF)
HANDLE_DW_AT(0x6b, data_bit_offset, 4, DWARF)
HANDLE_DW_AT(0x6c, const_expr, 4, DWARF)
HANDLE_DW_AT(0x6d, enum_class, 4, DWARF)
HANDLE_DW_AT(0x6e, linkage_name, 4, DWARF)
// New in DWARF v5:
HANDLE_DW_AT(0x6f, string_length_bit_size, 5, DWARF)
HANDLE_DW_AT(0x70, string_length_byte_size, 5, DWARF)
HANDLE_DW_AT(0x71, rank, 5, DWARF)
HANDLE_DW_AT(0x72, str_offsets_base, 5, DWARF)
HANDLE_DW_AT(0x73, addr_base, 5, DWARF)
HANDLE_DW_AT(0x74, rnglists_base, 5, DWARF)
HANDLE_DW_AT(0x75, dwo_id, 0, DWARF) ///< Retracted from DWARF v5.
HANDLE_DW_AT(0x76, dwo_name, 5, DWARF)
HANDLE_DW_AT(0x77, reference, 5, DWARF)
HANDLE_DW_AT(0x78, rvalue_reference, 5, DWARF)
HANDLE_DW_AT(0x79, macros, 5, DWARF)
HANDLE_DW_AT(0x7a, call_all_calls, 5, DWARF)
HANDLE_DW_AT(0x7b, call_all_source_calls, 5, DWARF)
HANDLE_DW_AT(0x7c, call_all_tail_calls, 5, DWARF)
HANDLE_DW_AT(0x7d, call_return_pc, 5, DWARF)
HANDLE_DW_AT(0x7e, call_value, 5, DWARF)
HANDLE_DW_AT(0x7f, call_origin, 5, DWARF)
HANDLE_DW_AT(0x80, call_parameter, 5, DWARF)
HANDLE_DW_AT(0x81, call_pc, 5, DWARF)
HANDLE_DW_AT(0x82, call_tail_call, 5, DWARF)
HANDLE_DW_AT(0x83, call_target, 5, DWARF)
HANDLE_DW_AT(0x84, call_target_clobbered, 5, DWARF)
HANDLE_DW_AT(0x85, call_data_location, 5, DWARF)
HANDLE_DW_AT(0x86, call_data_value, 5, DWARF)
HANDLE_DW_AT(0x87, noreturn, 5, DWARF)
HANDLE_DW_AT(0x88, alignment, 5, DWARF)
HANDLE_DW_AT(0x89, export_symbols, 5, DWARF)
HANDLE_DW_AT(0x8a, deleted, 5, DWARF)
HANDLE_DW_AT(0x8b, defaulted, 5, DWARF)
HANDLE_DW_AT(0x8c, loclists_base, 5, DWARF)

// Vendor extensions:
HANDLE_DW_AT(0x806, GHS_namespace_alias, 0, GHS)
HANDLE_DW_AT(0x807, GHS_using_namespace, 0, GHS)
HANDLE_DW_AT(0x808, GHS_using_declaration, 0, GHS)

HANDLE_DW_AT(0x2001, MIPS_fde, 0, MIPS)
HANDLE_DW_AT(0x2002, MIPS_loop_begin, 0, MIPS)
HANDLE_DW_AT(0x2003, MIPS_tail_loop_begin, 0, MIPS)
HANDLE_DW_AT(0x2004, MIPS_epilog_begin, 0, MIPS)
HANDLE_DW_AT(0x2005, MIPS_loop_unroll_factor, 0, MIPS)
HANDLE_DW_AT(0x2006, MIPS_software_pipeline_depth, 0, MIPS)
HANDLE_DW_AT(0x2007, MIPS_linkage_name, 0, MIPS)
// Conflicting:
// HANDLE_DW_AT(0x2007, GHS_mangled, 0, GHS)
HANDLE_DW_AT(0x2008, MIPS_stride, 0, MIPS)
HANDLE_DW_AT(0x2009, MIPS_abstract_name, 0, MIPS)
HANDLE_DW_AT(0x200a, MIPS_clone_origin, 0, MIPS)
HANDLE_DW_AT(0x200b, MIPS_has_inlines, 0, MIPS)
HANDLE_DW_AT(0x200c, MIPS_stride_byte, 0, MIPS)
HANDLE_DW_AT(0x200d, MIPS_stride_elem, 0, MIPS)
HANDLE_DW_AT(0x200e, MIPS_ptr_dopetype, 0, MIPS)
HANDLE_DW_AT(0x200f, MIPS_allocatable_dopetype, 0, MIPS)
HANDLE_DW_AT(0x2010, MIPS_assumed_shape_dopetype, 0, MIPS)

// This one appears to have only been implemented by Open64 for
// fortran and may conflict with other extensions.
HANDLE_DW_AT(0x2011, MIPS_assumed_size, 0, MIPS)

// HP  0x2001-0x2011 conflict with MIPS
// HANDLE_DW_AT(0x2001, HP_unmodifiable, 0, HP)
// HANDLE_DW_AT(0x2005, HP_prologue, 0, HP)
// HANDLE_DW_AT(0x2008, HP_epilogue, 0, HP)
// HANDLE_DW_AT(0x2010, HP_actuals_stmt_list, 0, HP)
// HANDLE_DW_AT(0x2011, HP_proc_per_section, 0, HP)

HANDLE_DW_AT(0x2012, HP_raw_data_ptr, 0, HP)
HANDLE_DW_AT(0x2013, HP_pass_by_reference, 0, HP)
HANDLE_DW_AT(0x2014, HP_opt_level, 0, HP)
HANDLE_DW_AT(0x2015, HP_prof_version_id, 0, HP)
HANDLE_DW_AT(0x2016, HP_opt_flags, 0, HP)
HANDLE_DW_AT(0x2017, HP_cold_region_low_pc, 0, HP)
HANDLE_DW_AT(0x2018, HP_cold_region_high_pc, 0, HP)
HANDLE_DW_AT(0x2019, HP_all_variables_modifiable, 0, HP)
HANDLE_DW_AT(0x201a, HP_linkage_name, 0, HP)
HANDLE_DW_AT(0x201b, HP_prof_flags, 0, HP)
HANDLE_DW_AT(0x201f, HP_unit_name, 0, HP)
HANDLE_DW_AT(0x2020, HP_unit_size, 0, HP)
HANDLE_DW_AT(0x2021, HP_widened_byte_size, 0, HP)
HANDLE_DW_AT(0x2022, HP_definition_points, 0, HP)
HANDLE_DW_AT(0x2023, HP_default_location, 0, HP)
HANDLE_DW_AT(0x2029, HP_is_result_param, 0, HP)

// COMPAQ/HP Conflicts with MIPS/HP  0x2001 - 0x2005
// HANDLE_DW_AT(0x2001, CPQ_discontig_ranges, 0, COMPAQ)
// HANDLE_DW_AT(0x2002, CPQ_semantic_events, 0, COMPAQ)
// HANDLE_DW_AT(0x2003, CPQ_split_lifetimes_var, 0, COMPAQ)
// HANDLE_DW_AT(0x2004, CPQ_split_lifetimes_rtn, 0, COMPAQ)
// HANDLE_DW_AT(0x2005, CPQ_prologue_length, 0, COMPAQ)

HANDLE_DW_AT(0x2026, DW_AT_INTEL_other_endian, 0, INTEL)

// Green Hills.
HANDLE_DW_AT(0x2083, GHS_rsm, 0, GHS)
HANDLE_DW_AT(0x2085, GHS_frsm, 0, GHS)
HANDLE_DW_AT(0x2086, GHS_frames, 0, GHS)
HANDLE_DW_AT(0x2087, GHS_rso, 0, GHS)
HANDLE_DW_AT(0x2092, GHS_subcpu, 0, GHS)
HANDLE_DW_AT(0x2093, GHS_lbrace_line, 0, GHS)

// GNU extensions
HANDLE_DW_AT(0x2101, sf_names, 0, GNU)
HANDLE_DW_AT(0x2102, src_info, 0, GNU)
HANDLE_DW_AT(0x2103, mac_info, 0, GNU)
HANDLE_DW_AT(0x2104, src_coords, 0, GNU)
HANDLE_DW_AT(0x2105, body_begin, 0, GNU)
HANDLE_DW_AT(0x2106, body_end, 0, GNU)
HANDLE_DW_AT(0x2107, GNU_vector, 0, GNU)
HANDLE_DW_AT(0x210f, GNU_odr_signature, 0, GNU)
HANDLE_DW_AT(0x2110, GNU_template_name, 0, GNU)
HANDLE_DW_AT(0x2111, GNU_call_site_value, 0, GNU)
HANDLE_DW_AT(0x2112, GNU_call_site_data_value, 0, GNU)
HANDLE_DW_AT(0x2113, GNU_call_site_target, 0, GNU)
HANDLE_DW_AT(0x2114, GNU_call_site_target_clobbered, 0, GNU)
HANDLE_DW_AT(0x2115, GNU_tail_call, 0, GNU)
HANDLE_DW_AT(0x2116, GNU_all_tail_call_sites, 0, GNU)
HANDLE_DW_AT(0x2117, GNU_all_call_sites, 0, GNU)
HANDLE_DW_AT(0x2118, GNU_all_source_call_sites, 0, GNU)
HANDLE_DW_AT(0x2119, GNU_macros, 0, GNU)
HANDLE_DW_AT(0x211a, GNU_deleted, 0, GNU)
// Extensions for Fission proposal.
HANDLE_DW_AT(0x2130, GNU_dwo_name, 0, GNU)
HANDLE_DW_AT(0x2131, GNU_dwo_id, 0, GNU)
HANDLE_DW_AT(0x2132, GNU_ranges_base, 0, GNU)
HANDLE_DW_AT(0x2133, GNU_addr_base, 0, GNU)
HANDLE_DW_AT(0x2134, GNU_pubnames, 0, GNU)
HANDLE_DW_AT(0x2135, GNU_pubtypes, 0, GNU)
HANDLE_DW_AT(0x2136, GNU_discriminator, 0, GNU)
HANDLE_DW_AT(0x2137, GNU_locviews, 0, GNU)
HANDLE_DW_AT(0x2138, GNU_entry_view, 0, GNU)

HANDLE_DW_AT(0x2201, SUN_template, 0, SUN)
// Conflicting:
// HANDLE_DW_AT(0x2201, VMS_rtnbeg_pd_address);

HANDLE_DW_AT(0x2202, SUN_alignment, 0, SUN)
HANDLE_DW_AT(0x2203, SUN_vtable, 0, SUN)
HANDLE_DW_AT(0x2204, SUN_count_guarantee, 0, SUN)
HANDLE_DW_AT(0x2205, SUN_command_line, 0, SUN)
HANDLE_DW_AT(0x2206, SUN_vbase, 0, SUN)
HANDLE_DW_AT(0x2207, SUN_compile_options, 0, SUN)
HANDLE_DW_AT(0x2208, SUN_language, 0, SUN)
HANDLE_DW_AT(0x2209, SUN_browser_file, 0, SUN)
HANDLE_DW_AT(0x2210, SUN_vtable_abi, 0, SUN)
HANDLE_DW_AT(0x2211, SUN_func_offsets, 0, SUN)
HANDLE_DW_AT(0x2212, SUN_cf_kind, 0, SUN)
HANDLE_DW_AT(0x2213, SUN_vtable_index, 0, SUN)
HANDLE_DW_AT(0x2214, SUN_omp_tpriv_addr, 0, SUN)
HANDLE_DW_AT(0x2215, SUN_omp_child_func, 0, SUN)
HANDLE_DW_AT(0x2216, SUN_func_offset, 0, SUN)
HANDLE_DW_AT(0x2217, SUN_memop_type_ref, 0, SUN)
HANDLE_DW_AT(0x2218, SUN_profile_id, 0, SUN)
HANDLE_DW_AT(0x2219, SUN_memop_signature, 0, SUN)

HANDLE_DW_AT(0x2220, SUN_obj_dir, 0, SUN)
HANDLE_DW_AT(0x2221, SUN_obj_file, 0, SUN)
HANDLE_DW_AT(0x2222, SUN_original_name, 0, SUN)
HANDLE_DW_AT(0x2223, SUN_hwcprof_signature, 0, SUN)
HANDLE_DW_AT(0x2224, SUN_amd64_parmdump, 0, SUN)
HANDLE_DW_AT(0x2225, SUN_part_link_name, 0, SUN)
HANDLE_DW_AT(0x2226, SUN_link_name, 0, SUN)
HANDLE_DW_AT(0x2227, SUN_pass_with_const, 0, SUN)
HANDLE_DW_AT(0x2228, SUN_return_with_const, 0, SUN)
HANDLE_DW_AT(0x2229, SUN_import_by_name, 0, SUN)
HANDLE_DW_AT(0x222a, SUN_90_pointer, 0, SUN)
HANDLE_DW_AT(0x222b, SUN_pass_by_ref, 0, SUN)
HANDLE_DW_AT(0x222c, SUN_f90_allocatable, 0, SUN)
HANDLE_DW_AT(0x222d, SUN_f90_assumed_shape_array, 0, SUN)
HANDLE_DW_AT(0x222e, SUN_c_vla, 0, SUN)
HANDLE_DW_AT(0x2230, SUN_return_value_ptr, 0, SUN)
HANDLE_DW_AT(0x2231, SUN_dtor_start, 0, SUN)
HANDLE_DW_AT(0x2232, SUN_dtor_length, 0, SUN)
HANDLE_DW_AT(0x2233, SUN_dtor_state_initial, 0, SUN)
HANDLE_DW_AT(0x2234, SUN_dtor_state_final, 0, SUN)
HANDLE_DW_AT(0x2235, SUN_dtor_state_deltas, 0, SUN)
HANDLE_DW_AT(0x2236, SUN_import_by_lname, 0, SUN)
HANDLE_DW_AT(0x2237, SUN_f90_use_only, 0, SUN)
HANDLE_DW_AT(0x2238, SUN_namelist_spec, 0, SUN)
HANDLE_DW_AT(0x2239, SUN_is_omp_child_func, 0, SUN)
HANDLE_DW_AT(0x223a, SUN_fortran_main_alias, 0, SUN)
HANDLE_DW_AT(0x223b, SUN_fortran_based, 0, SUN)

HANDLE_DW_AT(0x2300, ALTIUM_loclist, 0, ALTIUM)

HANDLE_DW_AT(0x2301, use_GNAT_descriptive_type, 0, GNU)
HANDLE_DW_AT(0x2302, GNAT_descriptive_type, 0, GNU)
HANDLE_DW_AT(0x2303, GNU_numerator, 0, GNU)
HANDLE_DW_AT(0x2304, GNU_denominator, 0, GNU)
HANDLE_DW_AT(0x2305, GNU_bias, 0, GNU)

HANDLE_DW_AT(0x2900, GO_kind, 0, GO)
HANDLE_DW_AT(0x2901, GO_key, 0, GO)
HANDLE_DW_AT(0x2902, GO_elem, 0, GO)
HANDLE_DW_AT(0x2903, GO_embedded_field, 0, GO)
HANDLE_DW_AT(0x2904, GO_runtime_type, 0, GO)

HANDLE_DW_AT(0x3210, UPC_threads_scaled, 0, UPC)

HANDLE_DW_AT(0x393e, IBM_wsa_addr, 0, IBM)
HANDLE_DW_AT(0x393f, IBM_home_location, 0, IBM)
HANDLE_DW_AT(0x3940, IBM_alt_srcview, 0, IBM)

// PGI extensions (STMicroelectronics)
HANDLE_DW_AT(0x3a00, PGI_lbase, 0, PGI)
HANDLE_DW_AT(0x3a01, PGI_soffset, 0, PGI)
HANDLE_DW_AT(0x3a02, PGI_lstride, 0, PGI)

// Borland extensions.
HANDLE_DW_AT(0x3b11, BORLAND_property_read, 0, BORLAND)
HANDLE_DW_AT(0x3b12, BORLAND_property_write, 0, BORLAND)
HANDLE_DW_AT(0x3b13, BORLAND_property_implements, 0, BORLAND)
HANDLE_DW_AT(0x3b14, BORLAND_property_index, 0, BORLAND)
HANDLE_DW_AT(0x3b15, BORLAND_property_default, 0, BORLAND)
HANDLE_DW_AT(0x3b20, BORLAND_Delphi_unit, 0, BORLAND)
HANDLE_DW_AT(0x3b21, BORLAND_Delphi_class, 0, BORLAND)
HANDLE_DW_AT(0x3b22, BORLAND_Delphi_record, 0, BORLAND)
HANDLE_DW_AT(0x3b23, BORLAND_Delphi_metaclass, 0, BORLAND)
HANDLE_DW_AT(0x3b24, BORLAND_Delphi_constructor, 0, BORLAND)
HANDLE_DW_AT(0x3b25, BORLAND_Delphi_destructor, 0, BORLAND)
HANDLE_DW_AT(0x3b26, BORLAND_Delphi_anonymous_method, 0, BORLAND)
HANDLE_DW_AT(0x3b27, BORLAND_Delphi_interface, 0, BORLAND)
HANDLE_DW_AT(0x3b28, BORLAND_Delphi_ABI, 0, BORLAND)
HANDLE_DW_AT(0x3b29, BORLAND_Delphi_return, 0, BORLAND)
HANDLE_DW_AT(0x3b30, BORLAND_Delphi_frameptr, 0, BORLAND)
HANDLE_DW_AT(0x3b31, BORLAND_closure, 0, BORLAND)
// LLVM project extensions.
HANDLE_DW_AT(0x3e00, LLVM_include_path, 0, LLVM)
HANDLE_DW_AT(0x3e01, LLVM_config_macros, 0, LLVM)
HANDLE_DW_AT(0x3e02, LLVM_sysroot, 0, LLVM)
HANDLE_DW_AT(0x3e03, LLVM_tag_offset, 0, LLVM)
HANDLE_DW_AT(0x3e04, LLVM_ptrauth_key, 0, LLVM)
HANDLE_DW_AT(0x3e05, LLVM_ptrauth_address_discriminated, 0, LLVM)
HANDLE_DW_AT(0x3e06, LLVM_ptrauth_extra_discriminator, 0, LLVM)
HANDLE_DW_AT(0x3e07, LLVM_apinotes, 0, APPLE)
HANDLE_DW_AT(0x3e08, LLVM_ptrauth_isa_pointer, 0, LLVM)
HANDLE_DW_AT(0x3e09, LLVM_ptrauth_authenticates_null_values, 0, LLVM)
HANDLE_DW_AT(0x3e0a, LLVM_ptrauth_authentication_mode, 0, LLVM)

// Apple extensions.

HANDLE_DW_AT(0x3fe1, APPLE_optimized, 0, APPLE)
HANDLE_DW_AT(0x3fe2, APPLE_flags, 0, APPLE)
HANDLE_DW_AT(0x3fe3, APPLE_isa, 0, APPLE)
HANDLE_DW_AT(0x3fe4, APPLE_block, 0, APPLE)
HANDLE_DW_AT(0x3fe5, APPLE_major_runtime_vers, 0, APPLE)
HANDLE_DW_AT(0x3fe6, APPLE_runtime_class, 0, APPLE)
HANDLE_DW_AT(0x3fe7, APPLE_omit_frame_ptr, 0, APPLE)
HANDLE_DW_AT(0x3fe8, APPLE_property_name, 0, APPLE)
HANDLE_DW_AT(0x3fe9, APPLE_property_getter, 0, APPLE)
HANDLE_DW_AT(0x3fea, APPLE_property_setter, 0, APPLE)
HANDLE_DW_AT(0x3feb, APPLE_property_attribute, 0, APPLE)
HANDLE_DW_AT(0x3fec, APPLE_objc_complete_type, 0, APPLE)
HANDLE_DW_AT(0x3fed, APPLE_property, 0, APPLE)
HANDLE_DW_AT(0x3fee, APPLE_objc_direct, 0, APPLE)
HANDLE_DW_AT(0x3fef, APPLE_sdk, 0, APPLE)
HANDLE_DW_AT(0x3ff0, APPLE_origin, 0, APPLE)

// Attribute form encodings.
HANDLE_DW_FORM(0x01, addr, 2, DWARF)
HANDLE_DW_FORM(0x03, block2, 2, DWARF)
HANDLE_DW_FORM(0x04, block4, 2, DWARF)
HANDLE_DW_FORM(0x05, data2, 2, DWARF)
HANDLE_DW_FORM(0x06, data4, 2, DWARF)
HANDLE_DW_FORM(0x07, data8, 2, DWARF)
HANDLE_DW_FORM(0x08, string, 2, DWARF)
HANDLE_DW_FORM(0x09, block, 2, DWARF)
HANDLE_DW_FORM(0x0a, block1, 2, DWARF)
HANDLE_DW_FORM(0x0b, data1, 2, DWARF)
HANDLE_DW_FORM(0x0c, flag, 2, DWARF)
HANDLE_DW_FORM(0x0d, sdata, 2, DWARF)
HANDLE_DW_FORM(0x0e, strp, 2, DWARF)
HANDLE_DW_FORM(0x0f, udata, 2, DWARF)
HANDLE_DW_FORM(0x10, ref_addr, 2, DWARF)
HANDLE_DW_FORM(0x11, ref1, 2, DWARF)
HANDLE_DW_FORM(0x12, ref2, 2, DWARF)
HANDLE_DW_FORM(0x13, ref4, 2, DWARF)
HANDLE_DW_FORM(0x14, ref8, 2, DWARF)
HANDLE_DW_FORM(0x15, ref_udata, 2, DWARF)
HANDLE_DW_FORM(0x16, indirect, 2, DWARF)
// New in DWARF v4:
HANDLE_DW_FORM(0x17, sec_offset, 4, DWARF)
HANDLE_DW_FORM(0x18, exprloc, 4, DWARF)
HANDLE_DW_FORM(0x19, flag_present, 4, DWARF)
// This was defined out of sequence.
HANDLE_DW_FORM(0x20, ref_sig8, 4, DWARF)
// New in DWARF v5:
HANDLE_DW_FORM(0x1a, strx, 5, DWARF)
HANDLE_DW_FORM(0x1b, addrx, 5, DWARF)
HANDLE_DW_FORM(0x1c, ref_sup4, 5, DWARF)
HANDLE_DW_FORM(0x1d, strp_sup, 5, DWARF)
HANDLE_DW_FORM(0x1e, data16, 5, DWARF)
HANDLE_DW_FORM(0x1f, line_strp, 5, DWARF)
HANDLE_DW_FORM(0x21, implicit_const, 5, DWARF)
HANDLE_DW_FORM(0x22, loclistx, 5, DWARF)
HANDLE_DW_FORM(0x23, rnglistx, 5, DWARF)
HANDLE_DW_FORM(0x24, ref_sup8, 5, DWARF)
HANDLE_DW_FORM(0x25, strx1, 5, DWARF)
HANDLE_DW_FORM(0x26, strx2, 5, DWARF)
HANDLE_DW_FORM(0x27, strx3, 5, DWARF)
HANDLE_DW_FORM(0x28, strx4, 5, DWARF)
HANDLE_DW_FORM(0x29, addrx1, 5, DWARF)
HANDLE_DW_FORM(0x2a, addrx2, 5, DWARF)
HANDLE_DW_FORM(0x2b, addrx3, 5, DWARF)
HANDLE_DW_FORM(0x2c, addrx4, 5, DWARF)
// Extensions for Fission proposal
HANDLE_DW_FORM(0x1f01, GNU_addr_index, 0, GNU)
HANDLE_DW_FORM(0x1f02, GNU_str_index, 0, GNU)
// Alternate debug sections proposal (output of "dwz" tool).
HANDLE_DW_FORM(0x1f20, GNU_ref_alt, 0, GNU)
HANDLE_DW_FORM(0x1f21, GNU_strp_alt, 0, GNU)
// LLVM addr+offset extension
HANDLE_DW_FORM(0x2001, LLVM_addrx_offset, 0, LLVM)

// DWARF Expression operators.
HANDLE_DW_OP(0x03, addr, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x06, deref, 0, 1, 2, DWARF)
HANDLE_DW_OP(0x08, const1u, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x09, const1s, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x0a, const2u, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x0b, const2s, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x0c, const4u, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x0d, const4s, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x0e, const8u, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x0f, const8s, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x10, constu, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x11, consts, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x12, dup, 0, 1, 2, DWARF)
HANDLE_DW_OP(0x13, drop, 0, 1, 2, DWARF)
HANDLE_DW_OP(0x14, over, 0, 1, 2, DWARF)
HANDLE_DW_OP(0x15, pick, 1, -1, 2, DWARF)
HANDLE_DW_OP(0x16, swap, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x17, rot, 0, 3, 2, DWARF)
HANDLE_DW_OP(0x18, xderef, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x19, abs, 0, 1, 2, DWARF)
HANDLE_DW_OP(0x1a, and, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x1b, div, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x1c, minus, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x1d, mod, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x1e, mul, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x1f, neg, 0, 1, 2, DWARF)
HANDLE_DW_OP(0x20, not, 0, 1, 2, DWARF)
HANDLE_DW_OP(0x21, or, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x22, plus, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x23, plus_uconst, 1, 1, 2, DWARF)
HANDLE_DW_OP(0x24, shl, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x25, shr, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x26, shra, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x27, xor, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x28, bra, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x29, eq, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x2a, ge, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x2b, gt, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x2c, le, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x2d, lt, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x2e, ne, 0, 2, 2, DWARF)
HANDLE_DW_OP(0x2f, skip, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x30, lit0, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x31, lit1, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x32, lit2, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x33, lit3, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x34, lit4, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x35, lit5, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x36, lit6, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x37, lit7, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x38, lit8, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x39, lit9, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x3a, lit10, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x3b, lit11, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x3c, lit12, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x3d, lit13, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x3e, lit14, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x3f, lit15, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x40, lit16, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x41, lit17, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x42, lit18, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x43, lit19, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x44, lit20, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x45, lit21, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x46, lit22, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x47, lit23, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x48, lit24, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x49, lit25, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x4a, lit26, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x4b, lit27, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x4c, lit28, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x4d, lit29, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x4e, lit30, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x4f, lit31, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x50, reg0, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x51, reg1, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x52, reg2, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x53, reg3, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x54, reg4, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x55, reg5, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x56, reg6, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x57, reg7, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x58, reg8, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x59, reg9, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x5a, reg10, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x5b, reg11, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x5c, reg12, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x5d, reg13, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x5e, reg14, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x5f, reg15, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x60, reg16, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x61, reg17, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x62, reg18, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x63, reg19, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x64, reg20, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x65, reg21, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x66, reg22, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x67, reg23, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x68, reg24, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x69, reg25, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x6a, reg26, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x6b, reg27, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x6c, reg28, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x6d, reg29, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x6e, reg30, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x6f, reg31, 0, 0, 2, DWARF)
HANDLE_DW_OP(0x70, breg0, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x71, breg1, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x72, breg2, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x73, breg3, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x74, breg4, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x75, breg5, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x76, breg6, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x77, breg7, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x78, breg8, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x79, breg9, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x7a, breg10, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x7b, breg11, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x7c, breg12, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x7d, breg13, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x7e, breg14, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x7f, breg15, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x80, breg16, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x81, breg17, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x82, breg18, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x83, breg19, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x84, breg20, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x85, breg21, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x86, breg22, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x87, breg23, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x88, breg24, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x89, breg25, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x8a, breg26, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x8b, breg27, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x8c, breg28, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x8d, breg29, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x8e, breg30, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x8f, breg31, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x90, regx, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x91, fbreg, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x92, bregx, 2, 0, 2, DWARF)
HANDLE_DW_OP(0x93, piece, 1, 0, 2, DWARF)
HANDLE_DW_OP(0x94, deref_size, 1, 1, 2, DWARF)
HANDLE_DW_OP(0x95, xderef_size, 1, 1, 2, DWARF)
HANDLE_DW_OP(0x96, nop, 0, 0, 2, DWARF)
// New in DWARF v3:
HANDLE_DW_OP(0x97, push_object_address, 0, 0, 3, DWARF)
HANDLE_DW_OP(0x98, call2, 1, 0, 3, DWARF)
HANDLE_DW_OP(0x99, call4, 1, 0, 3, DWARF)
HANDLE_DW_OP(0x9a, call_ref, 1, 1, 3, DWARF)
HANDLE_DW_OP(0x9b, form_tls_address, 0, 1, 3, DWARF)
HANDLE_DW_OP(0x9c, call_frame_cfa, 0, 0, 3, DWARF)
HANDLE_DW_OP(0x9d, bit_piece, 2, 0, 3, DWARF)
// New in DWARF v4:
HANDLE_DW_OP(0x9e, implicit_value, 2, 0, 4, DWARF)
HANDLE_DW_OP(0x9f, stack_value, 0, 1, 4, DWARF)
// New in DWARF v5:
HANDLE_DW_OP(0xa0, implicit_pointer, 2, 0, 5, DWARF)
HANDLE_DW_OP(0xa1, addrx, 1, 0, 5, DWARF)
HANDLE_DW_OP(0xa2, constx, 1, 0, 5, DWARF)
HANDLE_DW_OP(0xa3, entry_value, 2, 0, 5, DWARF)
HANDLE_DW_OP(0xa4, const_type, 3, 0, 5, DWARF)
HANDLE_DW_OP(0xa5, regval_type, 2, 0, 5, DWARF)
HANDLE_DW_OP(0xa6, deref_type, 2, 1, 5, DWARF)
HANDLE_DW_OP(0xa7, xderef_type, 2, 2, 5, DWARF)
HANDLE_DW_OP(0xa8, convert, 2, 1, 5, DWARF)
HANDLE_DW_OP(0xa9, reinterpret, 1, 1, 5, DWARF)
// Vendor extensions:
// Extensions for GNU-style thread-local storage.
HANDLE_DW_OP(0xe0, GNU_push_tls_address, 0, 0, 0, GNU)
// Conflicting:
// HANDLE_DW_OP(0xe0, HP_unknown, -1, -1, 0, HP)
HANDLE_DW_OP(0xe1, HP_is_value, -1, -1, 0, HP)
HANDLE_DW_OP(0xe2, HP_fltconst4, -1, -1, 0, HP)
HANDLE_DW_OP(0xe3, HP_fltconst8, -1, -1, 0, HP)
HANDLE_DW_OP(0xe4, HP_mod_range, -1, -1, 0, HP)
HANDLE_DW_OP(0xe5, HP_unmod_range, -1, -1, 0, HP)
HANDLE_DW_OP(0xe6, HP_tls, -1, -1, 0, HP)
HANDLE_DW_OP(0xe8, INTEL_bit_piece, -1, -1, 0, INTEL)

// Extensions for WebAssembly.
HANDLE_DW_OP(0xed, WASM_location, -1, -1, 0, WASM)
HANDLE_DW_OP(0xee, WASM_location_int, -1, -1, 0, WASM)
// Historic and not implemented in LLVM.
HANDLE_DW_OP(0xf0, APPLE_uninit, -1, -1, 0, APPLE)
// The GNU entry value extension.
HANDLE_DW_OP(0xf3, GNU_entry_value, 2, 0, 0, GNU)
HANDLE_DW_OP(0xf8, PGI_omp_thread_num, -1, -1, 0, PGI)
// Extensions for Fission proposal.
HANDLE_DW_OP(0xfb, GNU_addr_index, 1, 0, 0, GNU)
HANDLE_DW_OP(0xfc, GNU_const_index, 1, 0, 0, GNU)

// DW_OP_LLVM_user has two operands:
//   (1) An unsigned LEB128 "LLVM Vendor Extension Opcode".
//   (2) Zero or more literal operands, the number and type of which are
//       implied by the opcode (1).
// DW_OP_LLVM_user acts as an extension multiplexer, opening up the encoding
// space to accommodate an infinite number of extensions. This better reflects
// the de-facto permanent allocation of extensions.
HANDLE_DW_OP(0xe9, LLVM_user, -1, -1, 0, LLVM)
// "LLVM Vendor Extension" operations under the DW_OP_LLVM_user encoding
// scheme. This list is authoritative and exhaustive. Once an operation is
// registered here it cannot be removed nor have its encoding changed. The
// encoding space must skip zero (which is reserved) and have no gaps.
//
// The DW_OP_LLVM_user DW_OP_LLVM_nop operation has no effect on the
// location stack or any of its values. It is defined as a placeholder for
// testing purposes.
HANDLE_DW_OP_LLVM_USEROP(0x0001, nop)

// DWARF languages.
HANDLE_DW_LANG(0x0001, C89, 0, 2, DWARF)
HANDLE_DW_LANG(0x0002, C, 0, 2, DWARF)
HANDLE_DW_LANG(0x0003, Ada83, 1, 2, DWARF)
HANDLE_DW_LANG(0x0004, C_plus_plus, 0, 2, DWARF)
HANDLE_DW_LANG(0x0005, Cobol74, 1, 2, DWARF)
HANDLE_DW_LANG(0x0006, Cobol85, 1, 2, DWARF)
HANDLE_DW_LANG(0x0007, Fortran77, 1, 2, DWARF)
HANDLE_DW_LANG(0x0008, Fortran90, 1, 2, DWARF)
HANDLE_DW_LANG(0x0009, Pascal83, 1, 2, DWARF)
HANDLE_DW_LANG(0x000a, Modula2, 1, 2, DWARF)
// New in DWARF v3:
HANDLE_DW_LANG(0x000b, Java, 0, 3, DWARF)
HANDLE_DW_LANG(0x000c, C99, 0, 3, DWARF)
HANDLE_DW_LANG(0x000d, Ada95, 1, 3, DWARF)
HANDLE_DW_LANG(0x000e, Fortran95, 1, 3, DWARF)
HANDLE_DW_LANG(0x000f, PLI, 1, 3, DWARF)
HANDLE_DW_LANG(0x0010, ObjC, 0, 3, DWARF)
HANDLE_DW_LANG(0x0011, ObjC_plus_plus, 0, 3, DWARF)
HANDLE_DW_LANG(0x0012, UPC, 0, 3, DWARF)
HANDLE_DW_LANG(0x0013, D, 0, 3, DWARF)
// New in DWARF v4:
HANDLE_DW_LANG(0x0014, Python, 0, 4, DWARF)
// New in DWARF v5:
HANDLE_DW_LANG(0x0015, OpenCL, 0, 5, DWARF)
HANDLE_DW_LANG(0x0016, Go, 0, 5, DWARF)
HANDLE_DW_LANG(0x0017, Modula3, 1, 5, DWARF)
HANDLE_DW_LANG(0x0018, Haskell, 0, 5, DWARF)
HANDLE_DW_LANG(0x0019, C_plus_plus_03, 0, 5, DWARF)
HANDLE_DW_LANG(0x001a, C_plus_plus_11, 0, 5, DWARF)
HANDLE_DW_LANG(0x001b, OCaml, 0, 5, DWARF)
HANDLE_DW_LANG(0x001c, Rust, 0, 5, DWARF)
HANDLE_DW_LANG(0x001d, C11, 0, 5, DWARF)
HANDLE_DW_LANG(0x001e, Swift, 0, 5, DWARF)
HANDLE_DW_LANG(0x001f, Julia, 1, 5, DWARF)
HANDLE_DW_LANG(0x0020, Dylan, 0, 5, DWARF)
HANDLE_DW_LANG(0x0021, C_plus_plus_14, 0, 5, DWARF)
HANDLE_DW_LANG(0x0022, Fortran03, 1, 5, DWARF)
HANDLE_DW_LANG(0x0023, Fortran08, 1, 5, DWARF)
HANDLE_DW_LANG(0x0024, RenderScript, 0, 5, DWARF)
HANDLE_DW_LANG(0x0025, BLISS, 0, 5, DWARF)
// New since DWARF v5:
HANDLE_DW_LANG(0x0026, Kotlin, 0, 0, DWARF)
HANDLE_DW_LANG(0x0027, Zig, 0, 0, DWARF)
HANDLE_DW_LANG(0x0028, Crystal, 0, 0, DWARF)
HANDLE_DW_LANG(0x002a, C_plus_plus_17, 0, 0, DWARF)
HANDLE_DW_LANG(0x002b, C_plus_plus_20, 0, 0, DWARF)
HANDLE_DW_LANG(0x002c, C17, 0, 0, DWARF)
HANDLE_DW_LANG(0x002d, Fortran18, 0, 0, DWARF)
HANDLE_DW_LANG(0x002e, Ada2005, 0, 0, DWARF)
HANDLE_DW_LANG(0x002f, Ada2012, 0, 0, DWARF)
HANDLE_DW_LANG(0x0030, HIP, 0, 0, DWARF)
HANDLE_DW_LANG(0x0031, Assembly, 0, 0, DWARF)
HANDLE_DW_LANG(0x0032, C_sharp, 0, 0, DWARF)
HANDLE_DW_LANG(0x0033, Mojo, 0, 0, DWARF)
HANDLE_DW_LANG(0x0034, GLSL, 0, 0, DWARF)
HANDLE_DW_LANG(0x0035, GLSL_ES, 0, 0, DWARF)
HANDLE_DW_LANG(0x0036, HLSL, 0, 0, DWARF)
HANDLE_DW_LANG(0x0037, OpenCL_CPP, 0, 0, DWARF)
HANDLE_DW_LANG(0x0038, CPP_for_OpenCL, 0, 0, DWARF)
HANDLE_DW_LANG(0x0039, SYCL, 0, 0, DWARF)
HANDLE_DW_LANG(0x0040, Ruby, 0, 0, DWARF)
HANDLE_DW_LANG(0x0041, Move, 0, 0, DWARF)
HANDLE_DW_LANG(0x0042, Hylo, 0, 0, DWARF)

// Vendor extensions:
HANDLE_DW_LANG(0x8001, Mips_Assembler, std::nullopt, 0, MIPS)
HANDLE_DW_LANG(0x8e57, GOOGLE_RenderScript, 0, 0, GOOGLE)
HANDLE_DW_LANG(0xb000, BORLAND_Delphi, 0, 0, BORLAND)

// Tentative DWARF 6 language codes. This list is subject to change.
HANDLE_DW_LNAME(0x0001, Ada, "ISO Ada", 1) // YYYY
HANDLE_DW_LNAME(0x0002, BLISS, "BLISS", 0)
//     YYYYMM
// K&R 000000
// C89 198912
// C99 199901
// C11 201112
// C17 201710
// C23 202311
HANDLE_DW_LNAME(0x0003, C, "C (K&R and ISO)", 0)
//       YYYYMM
// C++98 199711
// C++03 200310
// C++11 201103
// C++14 201402
// C++17 201703
// C++20 202002
HANDLE_DW_LNAME(0x0004, C_plus_plus, "ISO C++", 0)
HANDLE_DW_LNAME(0x0005, Cobol, "ISO Cobol", 1) // YYYY
HANDLE_DW_LNAME(0x0006, Crystal, "Crystal", 0)
HANDLE_DW_LNAME(0x0007, D, "D", 0)
HANDLE_DW_LNAME(0x0008, Dylan, "Dylan", 0)
HANDLE_DW_LNAME(0x0009, Fortran, "ISO Fortran", 1) // YYYY
HANDLE_DW_LNAME(0x000a, Go, "Go", 0)
HANDLE_DW_LNAME(0x000b, Haskell, "Haskell", 0)
HANDLE_DW_LNAME(0x000c, Java, "Java", 0)
HANDLE_DW_LNAME(0x000d, Julia, "Julia", 1)
HANDLE_DW_LNAME(0x000e, Kotlin, "Kotlin", 0)
HANDLE_DW_LNAME(0x000f, Modula2, "Modula 2", 1)
HANDLE_DW_LNAME(0x0010, Modula3, "Modula 3", 1)
HANDLE_DW_LNAME(0x0011, ObjC, "Objective C", 0) // YYYYMM
HANDLE_DW_LNAME(0x0012, ObjC_plus_plus, "Objective C++", 0) // YYYYMM
HANDLE_DW_LNAME(0x0013, OCaml, "OCaml", 0)
HANDLE_DW_LNAME(0x0014, OpenCL_C, "OpenCL C", 0)
HANDLE_DW_LNAME(0x0015, Pascal, "ISO Pascal", 1) // YYYY
HANDLE_DW_LNAME(0x0016, PLI, "ANSI PL/I", 1)
HANDLE_DW_LNAME(0x0017, Python, "Python", 0)
HANDLE_DW_LNAME(0x0018, RenderScript, "RenderScript Kernel Language", 0)
HANDLE_DW_LNAME(0x0019, Rust, "Rust", 0)
HANDLE_DW_LNAME(0x001a, Swift, "Swift", 0) // VVMM
HANDLE_DW_LNAME(0x001b, UPC, "Unified Parallel C (UPC)", 0)
HANDLE_DW_LNAME(0x001c, Zig, "Zig", 0)
HANDLE_DW_LNAME(0x001d, Assembly, "Assembly", 0)
// Conflict: HANDLE_DW_LNAME(0x001d, HIP, "HIP", 0)
HANDLE_DW_LNAME(0x001e, C_sharp, "C#", 0)
HANDLE_DW_LNAME(0x001f, Mojo, "Mojo", 0)
HANDLE_DW_LNAME(0x0020, GLSL, "OpenGL Shading Language", 0) // VVMMPP
HANDLE_DW_LNAME(0x0021, GLSL_ES, "OpenGL ES Shading Language", 0) // VVMMPP
HANDLE_DW_LNAME(0x0022, HLSL, "High Level Shading Language", 0) // YYYY
HANDLE_DW_LNAME(0x0023, OpenCL_CPP, "OpenCL C++", 0) // VVMM
HANDLE_DW_LNAME(0x0024, CPP_for_OpenCL, "C++ for OpenCL", 0) // VVMM
HANDLE_DW_LNAME(0x0025, SYCL, "SYCL", 0) // YYYYRR
HANDLE_DW_LNAME(0x0026, Ruby, "Ruby", 0) // VVMMPP
HANDLE_DW_LNAME(0x0027, Move, "Move", 0) // YYYYMM
HANDLE_DW_LNAME(0x0028, Hylo, "Hylo", 0)

// DWARF attribute type encodings.
HANDLE_DW_ATE(0x01, address, 2, DWARF)
HANDLE_DW_ATE(0x02, boolean, 2, DWARF)
HANDLE_DW_ATE(0x03, complex_float, 2, DWARF)
HANDLE_DW_ATE(0x04, float, 2, DWARF)
HANDLE_DW_ATE(0x05, signed, 2, DWARF)
HANDLE_DW_ATE(0x06, signed_char, 2, DWARF)
HANDLE_DW_ATE(0x07, unsigned, 2, DWARF)
HANDLE_DW_ATE(0x08, unsigned_char, 2, DWARF)
// New in DWARF v3:
HANDLE_DW_ATE(0x09, imaginary_float, 3, DWARF)
HANDLE_DW_ATE(0x0a, packed_decimal, 3, DWARF)
HANDLE_DW_ATE(0x0b, numeric_string, 3, DWARF)
HANDLE_DW_ATE(0x0c, edited, 3, DWARF)
HANDLE_DW_ATE(0x0d, signed_fixed, 3, DWARF)
HANDLE_DW_ATE(0x0e, unsigned_fixed, 3, DWARF)
HANDLE_DW_ATE(0x0f, decimal_float, 3, DWARF)
// New in DWARF v4:
HANDLE_DW_ATE(0x10, UTF, 4, DWARF)
// New in DWARF v5:
HANDLE_DW_ATE(0x11, UCS, 5, DWARF)
HANDLE_DW_ATE(0x12, ASCII, 5, DWARF)

// The version numbers of all vendor extensions >0x80 were guessed.
// Conflicting:
// HANDLE_DW_ATE(0x80, ALTIUM_fract, 2, ALTIUM) = DW_ATE_low_user
// HANDLE_DW_ATE(0x81, ALTIUM_accum, 2, ALTIUM)

HANDLE_DW_ATE(0x81, HP_complex_float, 2, HP)
HANDLE_DW_ATE(0x82, HP_float128, 2, HP)
HANDLE_DW_ATE(0x83, HP_complex_float128, 2, HP)
HANDLE_DW_ATE(0x84, HP_floathpintel, 2, HP)
HANDLE_DW_ATE(0x85, HP_imaginary_float90, 2, HP)
HANDLE_DW_ATE(0x86, HP_imaginary_float128, 2, HP)
// Conflicting:
// HANDLE_DW_ATE(0x86, SUN_imaginary_float, 2, SUN)

// DWARF attribute endianity
HANDLE_DW_END(0x00, default)
HANDLE_DW_END(0x01, big)
HANDLE_DW_END(0x02, little)

// DWARF virtuality codes.
HANDLE_DW_VIRTUALITY(0x00, none)
HANDLE_DW_VIRTUALITY(0x01, virtual)
HANDLE_DW_VIRTUALITY(0x02, pure_virtual)

// DWARF v5 Defaulted Member Encodings.
HANDLE_DW_DEFAULTED(0x00, no)
HANDLE_DW_DEFAULTED(0x01, in_class)
HANDLE_DW_DEFAULTED(0x02, out_of_class)

// DWARF calling convention codes.
HANDLE_DW_CC(0x01, normal)
HANDLE_DW_CC(0x02, program)
HANDLE_DW_CC(0x03, nocall)
// New in DWARF v5:
HANDLE_DW_CC(0x04, pass_by_reference)
HANDLE_DW_CC(0x05, pass_by_value)
// Vendor extensions:
HANDLE_DW_CC(0x40, GNU_renesas_sh)
HANDLE_DW_CC(0x41, GNU_borland_fastcall_i386)
HANDLE_DW_CC(0xb0, BORLAND_safecall)
HANDLE_DW_CC(0xb1, BORLAND_stdcall)
HANDLE_DW_CC(0xb2, BORLAND_pascal)
HANDLE_DW_CC(0xb3, BORLAND_msfastcall)
HANDLE_DW_CC(0xb4, BORLAND_msreturn)
HANDLE_DW_CC(0xb5, BORLAND_thiscall)
HANDLE_DW_CC(0xb6, BORLAND_fastcall)
HANDLE_DW_CC(0xc0, LLVM_vectorcall)
HANDLE_DW_CC(0xc1, LLVM_Win64)
HANDLE_DW_CC(0xc2, LLVM_X86_64SysV)
HANDLE_DW_CC(0xc3, LLVM_AAPCS)
HANDLE_DW_CC(0xc4, LLVM_AAPCS_VFP)
HANDLE_DW_CC(0xc5, LLVM_IntelOclBicc)
HANDLE_DW_CC(0xc6, LLVM_SpirFunction)
HANDLE_DW_CC(0xc7, LLVM_OpenCLKernel)
HANDLE_DW_CC(0xc8, LLVM_Swift)
HANDLE_DW_CC(0xc9, LLVM_PreserveMost)
HANDLE_DW_CC(0xca, LLVM_PreserveAll)
HANDLE_DW_CC(0xcb, LLVM_X86RegCall)
HANDLE_DW_CC(0xcc, LLVM_M68kRTD)
HANDLE_DW_CC(0xcd, LLVM_PreserveNone)
HANDLE_DW_CC(0xce, LLVM_RISCVVectorCall)
HANDLE_DW_CC(0xcf, LLVM_SwiftTail)
// From GCC source code (include/dwarf2.h): This DW_CC_ value is not currently
// generated by any toolchain.  It is used internally to GDB to indicate OpenCL
// C functions that have been compiled with the IBM XL C for OpenCL compiler and
// use a non-platform calling convention for passing OpenCL C vector types.
HANDLE_DW_CC(0xff, GDB_IBM_OpenCL)

// Line Number Extended Opcode Encodings
HANDLE_DW_LNE(0x01, end_sequence)
HANDLE_DW_LNE(0x02, set_address)
HANDLE_DW_LNE(0x03, define_file)
// New in DWARF v4:
HANDLE_DW_LNE(0x04, set_discriminator)

// Line Number Standard Opcode Encodings.
HANDLE_DW_LNS(0x00, extended_op)
HANDLE_DW_LNS(0x01, copy)
HANDLE_DW_LNS(0x02, advance_pc)
HANDLE_DW_LNS(0x03, advance_line)
HANDLE_DW_LNS(0x04, set_file)
HANDLE_DW_LNS(0x05, set_column)
HANDLE_DW_LNS(0x06, negate_stmt)
HANDLE_DW_LNS(0x07, set_basic_block)
HANDLE_DW_LNS(0x08, const_add_pc)
HANDLE_DW_LNS(0x09, fixed_advance_pc)
// New in DWARF v3:
HANDLE_DW_LNS(0x0a, set_prologue_end)
HANDLE_DW_LNS(0x0b, set_epilogue_begin)
HANDLE_DW_LNS(0x0c, set_isa)

// DWARF v5 Line number header entry format.
HANDLE_DW_LNCT(0x01, path)
HANDLE_DW_LNCT(0x02, directory_index)
HANDLE_DW_LNCT(0x03, timestamp)
HANDLE_DW_LNCT(0x04, size)
HANDLE_DW_LNCT(0x05, MD5)
// A vendor extension until http://dwarfstd.org/ShowIssue.php?issue=180201.1 is
// accepted and incorporated into the next DWARF standard.
HANDLE_DW_LNCT(0x2001, LLVM_source)

// DWARF v5 Macro information.
HANDLE_DW_MACRO(0x01, define)
HANDLE_DW_MACRO(0x02, undef)
HANDLE_DW_MACRO(0x03, start_file)
HANDLE_DW_MACRO(0x04, end_file)
HANDLE_DW_MACRO(0x05, define_strp)
HANDLE_DW_MACRO(0x06, undef_strp)
HANDLE_DW_MACRO(0x07, import)
HANDLE_DW_MACRO(0x08, define_sup)
HANDLE_DW_MACRO(0x09, undef_sup)
HANDLE_DW_MACRO(0x0a, import_sup)
HANDLE_DW_MACRO(0x0b, define_strx)
HANDLE_DW_MACRO(0x0c, undef_strx)

// GNU .debug_macro extension.
HANDLE_DW_MACRO_GNU(0x01, define)
HANDLE_DW_MACRO_GNU(0x02, undef)
HANDLE_DW_MACRO_GNU(0x03, start_file)
HANDLE_DW_MACRO_GNU(0x04, end_file)
HANDLE_DW_MACRO_GNU(0x05, define_indirect)
HANDLE_DW_MACRO_GNU(0x06, undef_indirect)
HANDLE_DW_MACRO_GNU(0x07, transparent_include)
HANDLE_DW_MACRO_GNU(0x08, define_indirect_alt)
HANDLE_DW_MACRO_GNU(0x09, undef_indirect_alt)
HANDLE_DW_MACRO_GNU(0x0a, transparent_include_alt)

// DWARF v5 Macro header flags.
HANDLE_MACRO_FLAG(0x01, OFFSET_SIZE)
HANDLE_MACRO_FLAG(0x02, DEBUG_LINE_OFFSET)
HANDLE_MACRO_FLAG(0x04, OPCODE_OPERANDS_TABLE)

// DWARF v5 Range List Entry encoding values.
HANDLE_DW_RLE(0x00, end_of_list)
HANDLE_DW_RLE(0x01, base_addressx)
HANDLE_DW_RLE(0x02, startx_endx)
HANDLE_DW_RLE(0x03, startx_length)
HANDLE_DW_RLE(0x04, offset_pair)
HANDLE_DW_RLE(0x05, base_address)
HANDLE_DW_RLE(0x06, start_end)
HANDLE_DW_RLE(0x07, start_length)

// DWARF v5 Loc List Entry encoding values.
HANDLE_DW_LLE(0x00, end_of_list)
HANDLE_DW_LLE(0x01, base_addressx)
HANDLE_DW_LLE(0x02, startx_endx)
HANDLE_DW_LLE(0x03, startx_length)
HANDLE_DW_LLE(0x04, offset_pair)
HANDLE_DW_LLE(0x05, default_location)
HANDLE_DW_LLE(0x06, base_address)
HANDLE_DW_LLE(0x07, start_end)
HANDLE_DW_LLE(0x08, start_length)

// Call frame instruction encodings.
HANDLE_DW_CFA(0x00, nop)
HANDLE_DW_CFA(0x40, advance_loc)
HANDLE_DW_CFA(0x80, offset)
HANDLE_DW_CFA(0xc0, restore)
HANDLE_DW_CFA(0x01, set_loc)
HANDLE_DW_CFA(0x02, advance_loc1)
HANDLE_DW_CFA(0x03, advance_loc2)
HANDLE_DW_CFA(0x04, advance_loc4)
HANDLE_DW_CFA(0x05, offset_extended)
HANDLE_DW_CFA(0x06, restore_extended)
HANDLE_DW_CFA(0x07, undefined)
HANDLE_DW_CFA(0x08, same_value)
HANDLE_DW_CFA(0x09, register)
HANDLE_DW_CFA(0x0a, remember_state)
HANDLE_DW_CFA(0x0b, restore_state)
HANDLE_DW_CFA(0x0c, def_cfa)
HANDLE_DW_CFA(0x0d, def_cfa_register)
HANDLE_DW_CFA(0x0e, def_cfa_offset)
// New in DWARF v3:
HANDLE_DW_CFA(0x0f, def_cfa_expression)
HANDLE_DW_CFA(0x10, expression)
HANDLE_DW_CFA(0x11, offset_extended_sf)
HANDLE_DW_CFA(0x12, def_cfa_sf)
HANDLE_DW_CFA(0x13, def_cfa_offset_sf)
HANDLE_DW_CFA(0x14, val_offset)
HANDLE_DW_CFA(0x15, val_offset_sf)
HANDLE_DW_CFA(0x16, val_expression)
// Vendor extensions:
HANDLE_DW_CFA_PRED(0x1d, MIPS_advance_loc8, SELECT_MIPS64)
HANDLE_DW_CFA_PRED(0x2d, GNU_window_save, SELECT_SPARC)
HANDLE_DW_CFA_PRED(0x2d, AARCH64_negate_ra_state, SELECT_AARCH64)
HANDLE_DW_CFA_PRED(0x2e, GNU_args_size, SELECT_X86)
// Heterogeneous Debugging Extension defined at
// https://llvm.org/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.html#cfa-definition-instructions
HANDLE_DW_CFA(0x30, LLVM_def_aspace_cfa)
HANDLE_DW_CFA(0x31, LLVM_def_aspace_cfa_sf)

// Apple Objective-C Property Attributes.
// Keep this list in sync with clang's DeclObjCCommon.h
// ObjCPropertyAttribute::Kind!
HANDLE_DW_APPLE_PROPERTY(0x01, readonly)
HANDLE_DW_APPLE_PROPERTY(0x02, getter)
HANDLE_DW_APPLE_PROPERTY(0x04, assign)
HANDLE_DW_APPLE_PROPERTY(0x08, readwrite)
HANDLE_DW_APPLE_PROPERTY(0x10, retain)
HANDLE_DW_APPLE_PROPERTY(0x20, copy)
HANDLE_DW_APPLE_PROPERTY(0x40, nonatomic)
HANDLE_DW_APPLE_PROPERTY(0x80, setter)
HANDLE_DW_APPLE_PROPERTY(0x100, atomic)
HANDLE_DW_APPLE_PROPERTY(0x200, weak)
HANDLE_DW_APPLE_PROPERTY(0x400, strong)
HANDLE_DW_APPLE_PROPERTY(0x800, unsafe_unretained)
HANDLE_DW_APPLE_PROPERTY(0x1000, nullability)
HANDLE_DW_APPLE_PROPERTY(0x2000, null_resettable)
HANDLE_DW_APPLE_PROPERTY(0x4000, class)

// DWARF v5 Unit Types.
HANDLE_DW_UT(0x01, compile)
HANDLE_DW_UT(0x02, type)
HANDLE_DW_UT(0x03, partial)
HANDLE_DW_UT(0x04, skeleton)
HANDLE_DW_UT(0x05, split_compile)
HANDLE_DW_UT(0x06, split_type)

// DWARF section types. (enum name, ELF name, ELF DWO name, cmdline name,
// option) Note that these IDs don't mean anything.
// TODO: Add Mach-O and COFF names.
// Official DWARF sections.
HANDLE_DWARF_SECTION(DebugAbbrev, ".debug_abbrev", "debug-abbrev", BoolOption)
HANDLE_DWARF_SECTION(DebugAddr, ".debug_addr", "debug-addr", BoolOption)
HANDLE_DWARF_SECTION(DebugAranges, ".debug_aranges", "debug-aranges",
                     BoolOption)
HANDLE_DWARF_SECTION(DebugInfo, ".debug_info", "debug-info", OffsetOption)
HANDLE_DWARF_SECTION(DebugTypes, ".debug_types", "debug-types", OffsetOption)
HANDLE_DWARF_SECTION(DebugLine, ".debug_line", "debug-line", OffsetOption)
HANDLE_DWARF_SECTION(DebugLineStr, ".debug_line_str", "debug-line-str",
                     BoolOption)
HANDLE_DWARF_SECTION(DebugLoc, ".debug_loc", "debug-loc", OffsetOption)
HANDLE_DWARF_SECTION(DebugLoclists, ".debug_loclists", "debug-loclists",
                     OffsetOption)
HANDLE_DWARF_SECTION(DebugFrame, ".debug_frame", "debug-frame", OffsetOption)
HANDLE_DWARF_SECTION(DebugMacro, ".debug_macro", "debug-macro", BoolOption)
HANDLE_DWARF_SECTION(DebugNames, ".debug_names", "debug-names", BoolOption)
HANDLE_DWARF_SECTION(DebugPubnames, ".debug_pubnames", "debug-pubnames",
                     BoolOption)
HANDLE_DWARF_SECTION(DebugPubtypes, ".debug_pubtypes", "debug-pubtypes",
                     BoolOption)
HANDLE_DWARF_SECTION(DebugGnuPubnames, ".debug_gnu_pubnames",
                     "debug-gnu-pubnames", BoolOption)
HANDLE_DWARF_SECTION(DebugGnuPubtypes, ".debug_gnu_pubtypes",
                     "debug-gnu-pubtypes", BoolOption)
HANDLE_DWARF_SECTION(DebugRanges, ".debug_ranges", "debug-ranges", BoolOption)
HANDLE_DWARF_SECTION(DebugRnglists, ".debug_rnglists", "debug-rnglists",
                     BoolOption)
HANDLE_DWARF_SECTION(DebugStr, ".debug_str", "debug-str", BoolOption)
HANDLE_DWARF_SECTION(DebugStrOffsets, ".debug_str_offsets", "debug-str-offsets",
                     BoolOption)
HANDLE_DWARF_SECTION(DebugCUIndex, ".debug_cu_index", "debug-cu-index",
                     BoolOption)
HANDLE_DWARF_SECTION(DebugTUIndex, ".debug_tu_index", "debug-tu-index",
                     BoolOption)
// Vendor extensions.
HANDLE_DWARF_SECTION(AppleNames, ".apple_names", "apple-names", BoolOption)
HANDLE_DWARF_SECTION(AppleTypes, ".apple_types", "apple-types", BoolOption)
HANDLE_DWARF_SECTION(AppleNamespaces, ".apple_namespaces", "apple-namespaces",
                     BoolOption)
HANDLE_DWARF_SECTION(AppleObjC, ".apple_objc", "apple-objc", BoolOption)
HANDLE_DWARF_SECTION(GdbIndex, ".gdb_index", "gdb-index", BoolOption)

HANDLE_DW_IDX(0x01, compile_unit)
HANDLE_DW_IDX(0x02, type_unit)
HANDLE_DW_IDX(0x03, die_offset)
HANDLE_DW_IDX(0x04, parent)
HANDLE_DW_IDX(0x05, type_hash)
HANDLE_DW_IDX(0x2000, GNU_internal)
HANDLE_DW_IDX(0x2001, GNU_external)

// DWARF package file section identifiers.
// DWARFv5, section 7.3.5.3, table 7.1.
HANDLE_DW_SECT(1, INFO)
HANDLE_DW_SECT(3, ABBREV)
HANDLE_DW_SECT(4, LINE)
HANDLE_DW_SECT(5, LOCLISTS)
HANDLE_DW_SECT(6, STR_OFFSETS)
HANDLE_DW_SECT(7, MACRO)
HANDLE_DW_SECT(8, RNGLISTS)

#undef HANDLE_DW_TAG
#undef HANDLE_DW_AT
#undef HANDLE_DW_FORM
#undef HANDLE_DW_OP
#undef HANDLE_DW_OP_LLVM_USEROP
#undef HANDLE_DW_LANG
#undef HANDLE_DW_LNAME
#undef HANDLE_DW_ATE
#undef HANDLE_DW_VIRTUALITY
#undef HANDLE_DW_DEFAULTED
#undef HANDLE_DW_CC
#undef HANDLE_DW_LNS
#undef HANDLE_DW_LNE
#undef HANDLE_DW_LNCT
#undef HANDLE_DW_MACRO
#undef HANDLE_DW_MACRO_GNU
#undef HANDLE_MACRO_FLAG
#undef HANDLE_DW_RLE
#undef HANDLE_DW_LLE
#undef HANDLE_DW_CFA
#undef HANDLE_DW_CFA_PRED
#undef HANDLE_DW_APPLE_PROPERTY
#undef HANDLE_DW_UT
#undef HANDLE_DWARF_SECTION
#undef HANDLE_DW_IDX
#undef HANDLE_DW_END
#undef HANDLE_DW_SECT
